- name : 4.1.1 Ensure ufw is installed 
  block: 
     - name: 4.1.1 Ensure ufw is installed | audit 
       shell: 
          dpkg-query -s ufw &>/dev/null && echo "ufw is installed"  || echo "ufw is  not installed" 
       register: ufw_check_result
       changed_when: false

     - name: 4.1.1 Ensure ufw is installed | set_fact
       set_fact: 
           ufw_check: 
              name:  4.1.1 Ensure ufw is installed 
              remediation_status: "{{ 'true' if 'ufw is installed' in ufw_check_result.stdout else 'false' }}"
              remediation: "install ufw"

     - name:    4.1.1 Ensure ufw is installed | append result
       set_fact:
           audit_result: "{{ (audit_result | default([])) + [ ufw_check] }}"    
       changed_when: false

     - name:  4.1.1 Ensure ufw is installed || remediation
       apt:
        name: ufw
        state: present
       when: ufw_check.remediation_status == 'false'

##

# - name : 4.1.2 Ensure iptables-persistent is not installed with ufw 
#   block: 
#      - name:  4.1.2 Ensure iptables-persistent is not installed with ufw | audit 
#        shell: 
#           dpkg-query -s iptables-persistent &>/dev/null && echo "iptables-persistent is installed"  || echo "iptables-persistent is  not installed"
#        register: iptab_check_result
#        changed_when: false


#      - name: 4.1.2 Ensure iptables-persistent is not installed with ufw | set_fact
#        set_fact: 
#            iptab_check: 
#               name:  4.1.2 Ensure iptables-persistent is not installed with ufw 
#               remediation_status: "{{ 'true' if 'iptables-persistent is  not installed' in iptab_check_result.stdout else 'false' }}"
#               remediation: "remove  the iptables-persistent package" 


#      - name:   4.1.2 Ensure iptables-persistent is not installed with ufw | append result
#        set_fact:
#            audit_result: "{{ (audit_result | default([])) + [ iptab_check] }}"    
#        changed_when: false        

#      - name: 4.1.2 Ensure iptables-persistent is not installed with ufw  | remeiation
#        apt:
#          name: iptables-persistent
#          state: absent
#          purge: yes
#        when: iptab_check.remediation_status == 'false'
               

##


# - name: 4.1.3 Ensure ufw service is enabled
#   block:
#      - name: 4.1.3 Ensure ufw service is enabled | audit
#        shell: 
#          systemctl is-enabled ufw.service ; systemctl is-active ufw 
#        register: ufw_status_check
#        changed_when: false
#        ignore_errors: yes
  
#      - name: 4.1.3 Ensure ufw service is enabled | set_fact
#        set_fact:
#           ufw_status:
#             name: 4.1.3 Ensure ufw service is enabled 
#             remediation_status: "{{ 'true' if ufw_status_check.rc == 0 else 'false'}}"
#             remediation: "Enable and start the ufw daemon"

#      - name: 4.1.3 Ensure ufw service is enabled | append result 
#        set_fact:
#            audit_result: "{{ (audit_result | default([])) + [ ufw_status ] }}"    
#        changed_when: false   

#      - name: 4.1.3 Ensure ufw service is enabled | remediation
#        block:
#          - name: Unmask the ufw daemon
#            command: systemctl unmask ufw.service
#            when: ufw_status.remediation_status == 'false'  

#          - name: Enable and start the ufw daemon
#            command: systemctl --now enable ufw.service
#            when: ufw_status.remediation_status == 'false'  

#          - name: Enable ufw
#            command: ufw enable
#            when: ufw_status.remediation_status == 'false' 

##
- name: 4.1.4 Ensure ufw loopback traffic is configured
  block:
     - name: 4.1.4 Ensure ufw loopback traffic is configured | audit
       shell:
         ufw status verbose 
       register: ufw_status_result
       changed_when: false

     - name: 4.1.4 Ensure ufw loopback traffic is configured | set_fact
       set_fact:
          ufw_status:
            name: 4.1.4 Ensure ufw loopback traffic is configured
            remediation_status:  
                "{{ 'true' if
                   'ALLOW IN    Anywhere on lo' in ufw_status_result.stdout and
                   'DENY IN     127.0.0.0/8' in ufw_status_result.stdout and
                   'ALLOW OUT   Anywhere on lo' in uufw_status_result.stdout and
                   'ALLOW IN    Anywhere (v6) on lo' in ufw_status_result.stdout and
                   'DENY IN     ::1' in ufw_status_result.stdout
                   else 'false'
                }}"

     - name: 4.1.4 Ensure ufw loopback traffic is configured | append result 
       set_fact:
           audit_result: "{{ (audit_result | default([])) + [ ufw_status ] }}"    
       changed_when: false   


     - name: 4.1.4 Ensure ufw loopback traffic is configured | remediation
       block:
         - name: allow trafic on lo in
           command: ufw allow in on lo 
           when: ufw_status.remediation_status == 'false'   

         - name:  aloow trafic on lo out
           command: ufw allow out on lo
           when: ufw_status.remediation_status == 'false' 

         - name:  feny trafic from add 127.
           command: ufw deny in from 127.0.0.0/8 
           when: ufw_status.remediation_status == 'false'  
        

         - name:  feny trafic from add ::1
           command: ufw deny in from ::1 
           when: ufw_status.remediation_status == 'false'  
       