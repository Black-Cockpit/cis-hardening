# Pre audit
- name: "Pre Audit | Get rsyslog configuration"
  block:
  # Pre Audit | Stat /etc/rsyslog.d/
  - name: "Pre Audit | Get rsyslog configuration"
    stat:
      path: "/etc/rsyslog.d/"
    register: rsyslog_d_conf
    changed_when: false

  # Pre Audit | List rsyslog configuration files
  - name: "Pre Audit | List rsyslog configuration files"
    find:
      paths:
        - "/etc/rsyslog.d/"
      patterns:
        - "*.conf"
    register: rsyslog_d_conf_files_list
    changed_when: false
    when: rsyslog_d_conf.stat.exists
 
  # Define rsyslog configuration files list
  - set_fact:
      rsyslog_conf_files: "{{ rsyslog_conf_files | default([]) + [item.path]}}"
    changed_when: false
    loop: "{{ rsyslog_d_conf_files_list.files | default([]) }}"
    loop_control:
      label: "{{ item.path }}"
    when: rsyslog_d_conf.stat.exists

  # Append /etc/rsyslog.conf to rsyslog configuration files list
  - set_fact:
      rsyslog_conf_files: "{{ rsyslog_conf_files | default([]) + ['/etc/rsyslog.conf'] }}"
    changed_when: false


# 5.1.1 Configure rsyslog
- name: 5.1.1 Configure rsyslog
  block:
  # 5.1.1.1 Ensure rsyslog is installed
  #
  # The rsyslog software is recommended in environments where journald does not meet
  # operation requirements.
  - name: "5.1.1.1 Ensure rsyslog is installed"
    block:
    # 5.1.1.1 Ensure rsyslog is installed | Audit
    - name: 5.1.1.1 Ensure rsyslog is installed | Audit
      shell:
        cmd: rpm -q rsyslog | grep -Eq 'rsyslog[\-][0-9]' && echo 'installed' || echo 'not_installed'
      changed_when: false
      register: rsyslog_status_check

    # Extract audit result
    - set_fact:
        rsyslog_check:
          name: 5.1.1.1 Ensure rsyslog is installed
          scored: true
          automated: true
          remediation_status: "{{ true if rsyslog_status_check.stdout == 'installed' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [rsyslog_check] }}"
      changed_when: false

    # 5.1.1.1 Ensure rsyslog is installed | Remediation
    - name: 5.1.1.1 Ensure rsyslog is installed | Remediation
      package:
        name: rsyslog
        state: present
      when: not audit_only and not rsyslog_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 5.1.1.2 Ensure rsyslog service is enabled
  #
  # Once the rsyslog package is installed, ensure that the service is enabled.
  - name: "5.1.1.2 Ensure rsyslog service is enabled"
    block:
    # 5.1.1.2 Ensure rsyslog service is enabled | Audit
    - name: 5.1.1.2 Ensure rsyslog service is enabled | Audit
      systemd:
        name: rsyslog
      changed_when: false
      register: rsyslog_service_status_check

    # Extract audit result
    - set_fact:
        rsyslog_service_check:
          name: 5.1.1.2 Ensure rsyslog service is enabled
          scored: true
          automated: false
          remediation_status: "{{ true if (rsyslog_service_status_check.status.ActiveState == 'active' and rsyslog_service_status_check.status.UnitFileState == 'enabled') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [rsyslog_service_check] }}"
      changed_when: false

    # 5.1.1.2 Ensure rsyslog service is enabled | Remediation
    - name: 5.1.1.2 Ensure rsyslog service is enabled | Remediation
      systemd:
        name: rsyslog
        state: started
        enabled: true
        force: true
      when: not audit_only and not rsyslog_service_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 5.1.1.3 Ensure journald is configured to send logs to rsyslog
  #
  # Data from systemd-journald may be stored in volatile memory or persisted locally on
  # the server. Utilities exist to accept remote export of systemd-journald logs, however,
  # use of the rsyslog service provides a consistent means of log collection and export.
  - name: "5.1.1.3 Ensure journald is configured to send logs to rsyslog"
    block:
    # 5.1.1.3 Ensure journald is configured to send logs to rsyslog | Audit
    - name: 5.1.1.3 Ensure journald is configured to send logs to rsyslog | Audit
      shell:
        cmd: |
          while IFS= read -r file_name; do
              echo "${file_name//# /}"
          done <<<$(/usr/bin/systemd-analyze cat-config "/etc/systemd/journald.conf" | grep -E '[#]{0,}\/.*conf')
      changed_when: false
      register: journald_conf_files_list

    # 5.1.1.3 Ensure journald is configured to send logs to rsyslog | Audit
    - name: 5.1.1.3 Ensure journald is configured to send logs to rsyslog | Audit
      shell:
        cmd: |
          grep -E '^ForwardToSyslog' "{{ item }}" | awk -F '=' '{print $2}' | grep -q 'yes' && \
          echo 'configured' || echo 'not_configured'
      changed_when: false
      loop: "{{ journald_conf_files_list.stdout_lines | default([]) }}"
      register: journald_forward_log_status_check

    # Define remediation status
    - set_fact:
        journald_forward_log_remediation_status: "{{ true if ((journald_forward_log_remediation_status | default(false)) or item.stdout == 'configured' ) else false }}"
      loop: "{{ journald_forward_log_status_check.results | default([]) | list }}"
      loop_control:
        label: "{{ item.stdout }}"
      changed_when: false
   
    # Extract audit result
    - set_fact:
        journald_forward_log_check:
          name: 5.1.1.3 Ensure journald is configured to send logs to rsyslog
          scored: true
          automated: false
          remediation_status: "{{ true if journald_forward_log_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [journald_forward_log_check] }}"
      changed_when: false

    # 5.1.1.3 Ensure journald is configured to send logs to rsyslog | Remediation
    - name: 5.1.1.3 Ensure journald is configured to send logs to rsyslog | Remediation
      lineinfile:
        path: "{{ item }}"
        regexp: '^[#]{0,}(ForwardToSyslog).*'
        state: absent
      loop: "{{ journald_conf_files_list.stdout_lines | default([]) }}"
      when: not audit_only and not journald_forward_log_check.remediation_status

    # 5.1.1.3 Ensure journald is configured to send logs to rsyslog | Remediation
    - name: 5.1.1.3 Ensure journald is configured to send logs to rsyslog | Remediation
      file:
        path: "/etc/systemd/journald.conf.d"
        state: directory
      when: not audit_only and not journald_forward_log_check.remediation_status

    # 5.1.1.3 Ensure journald is configured to send logs to rsyslog | Remediation
    - name: 5.1.1.3 Ensure journald is configured to send logs to rsyslog | Remediation
      copy:
        dest: "/etc/systemd/journald.conf.d/cis_journald_forward.conf"
        content: "ForwardToSyslog=yes"
        mode: "0644"
        owner: root
      when: not audit_only and not journald_forward_log_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 5.1.1.4 Ensure rsyslog default file permissions are configured
  #
  # RSyslog will create logfiles that do not already exist on the system. This setting controls
  # what permissions will be applied to these newly created files.
  - name: "5.1.1.4 Ensure rsyslog default file permissions are configured"
    block:
    # 5.1.1.4 Ensure rsyslog default file permissions are configured | Audit
    - name: 5.1.1.4 Ensure rsyslog default file permissions are configured | Audit
      shell:
        cmd: |
          grep -Psq '^\h*\$FileCreateMode\h+0[0,2,4,6][0,2,4]0\b' /etc/rsyslog.conf /etc/rsyslog.d/*.conf && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: rsyslog_file_permissions_status_check

    # Extract audit result
    - set_fact:
        rsyslog_file_permissions_check:
          name: 5.1.1.4 Ensure rsyslog default file permissions are configured
          scored: true
          automated: true
          remediation_status: "{{ true if rsyslog_file_permissions_status_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [rsyslog_file_permissions_check] }}"
      changed_when: false

    # 5.1.1.4 Ensure rsyslog default file permissions are configured | Remediation
    - name: 5.1.1.4 Ensure rsyslog default file permissions are configured | Remediation
      lineinfile:
        path: "{{ item }}"
        regexp: '^[#]{0,}.*(FileCreateMode).*'
        state: absent
      loop: "{{ rsyslog_conf_files }}"
      when: not audit_only and not rsyslog_file_permissions_check.remediation_status

    # 5.1.1.4 Ensure rsyslog default file permissions are configured | Remediation
    - name: 5.1.1.4 Ensure rsyslog default file permissions are configured | Remediation
      file:
        path: "/etc/rsyslog.d/"
        state: directory
      when: not audit_only and not rsyslog_d_conf.stat.exists and not rsyslog_file_permissions_check.remediation_status

    # 5.1.1.4 Ensure rsyslog default file permissions are configured | Remediation
    - name: 5.1.1.4 Ensure rsyslog default file permissions are configured | Remediation
      copy:
        dest: "/etc/rsyslog.d/cis-file-create-mode-rsyslog.conf"
        content: '$FileCreateMode 0640'
        mode: "0644"
        owner: "root"
      when: not audit_only and not rsyslog_file_permissions_check.remediation_status
   
    # 5.1.1.4 Ensure rsyslog default file permissions are configured | Remediation
    - name: 5.1.1.4 Ensure rsyslog default file permissions are configured | Remediation
      service:
        name: rsyslog
        state: restarted
      when: not audit_only and not rsyslog_file_permissions_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 5.1.1.5 Ensure logging is configured
  #
  # The /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files specifies rules for logging and
  # which files are to be used to log certain classes of messages.
  - name: "5.1.1.5 Ensure logging is configured"
    block:
    # Extract audit result
    - set_fact:
        logging_config_check:
          name: 5.1.1.5 Ensure logging is configured
          scored: false
          automated: false
          remediation: |
            Condider to review the contents of /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files to ensure
            appropriate logging is set.
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [logging_config_check] }}"
      changed_when: false
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 5.1.1.6 Ensure rsyslog is configured to send logs to a remote log host
  #
  # RSyslog supports the ability to send log events it gathers to a remote log host or to
  # receive messages from remote hosts, thus enabling centralized log management.
  - name: "5.1.1.6 Ensure rsyslog is configured to send logs to a remote log host"
    block:
    # 5.1.1.6 Ensure rsyslog is configured to send logs to a remote log host | Audit
    - name: 5.1.1.6 Ensure rsyslog is configured to send logs to a remote log host | Audit
      shell:
        cmd: |
          [[ -d /etc/rsyslog.d/*.conf ]] && grep -E '^\s*([^#]+\s+)?action\(([^#]+\s+)?\btarget=\"?[^#"]+\"?\b' /etc/rsyslog.d/*.conf || echo ''
          grep -E '^\s*([^#]+\s+)?action\(([^#]+\s+)?\btarget=\"?[^#"]+\"?\b' /etc/rsyslog.conf || echo ''
      changed_when: false
      register: rsyslog_send_log_to_remote_status_check

    # Extract audit result
    - set_fact:
        rsyslog_send_log_to_remote_check:
          name: 5.1.1.6 Ensure rsyslog is configured to send logs to a remote log host
          scored: true
          automated: false
      changed_when: false

    # Define remediation description
    - set_fact:
        remediation_description:
          remediation: 'Consider to add the appropriate configuration to send log to a remote log host'
      changed_when: false
      when: rsyslog_send_log_to_remote_status_check.stdout == ''

    # Define remediation description
    - set_fact:
        remediation_description:
          remediation: "Consider to review rsyslog configuration bellow: \n{{ rsyslog_send_log_to_remote_status_check.stdout }}"
      changed_when: false
      when: rsyslog_send_log_to_remote_status_check.stdout != ''

    # Append remediation
    - set_fact:
        rsyslog_send_log_to_remote_check: "{{ rsyslog_send_log_to_remote_check | combine(remediation_description) }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [rsyslog_send_log_to_remote_check] }}"
      changed_when: false
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 5.1.1.7 Ensure rsyslog is not configured to receive logs from a remote client
  #
  # RSyslog supports the ability to receive messages from remote hosts, thus acting as a
  # log server. Clients should not receive data from other hosts.
  - name: "5.1.1.7 Ensure rsyslog is not configured to receive logs from a remote client"
    block:
    # 5.1.1.7 Ensure rsyslog is not configured to receive logs from a remote client | Audit
    - name: 5.1.1.7 Ensure rsyslog is not configured to receive logs from a remote client | Audit
      shell:
        cmd: |
          rsyslog_module=$(grep -Eq '^*module\(load="imtcp"\)' /etc/rsyslog.conf /etc/rsyslog.d/*.conf && echo 'not_configured' || echo 'configured')
          rsyslog_input=$(grep -Eq '^*input\(type="imtcp" port="514"\)' /etc/rsyslog.conf /etc/rsyslog.d/*.conf && echo 'not_configured' || echo 'configured')
          [[ "$rsyslog_module" == 'configured' && "$rsyslog_module" == 'configured' ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: rsyslog_as_log_server_status_check

    # Extract audit result
    - set_fact:
        rsyslog_as_log_server_check:
          name: 5.1.1.7 Ensure rsyslog is not configured to receive logs from a remote client
          scored: true
          automated: true
          remediation_status: "{{ true if rsyslog_as_log_server_status_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [rsyslog_as_log_server_check] }}"
      changed_when: false

    # 5.1.1.7 Ensure rsyslog is not configured to receive logs from a remote client | Remediation
    - name: 5.1.1.7 Ensure rsyslog is not configured to receive logs from a remote client | Remediation
      lineinfile:
        path: "{{ item }}"
        regexp: '.*module\(load="imtcp"\)'
        state: absent
      loop: "{{ rsyslog_conf_files }}"
      when: not audit_only and not rsyslog_as_log_server_check.remediation_status

    # 5.1.1.7 Ensure rsyslog is not configured to receive logs from a remote client | Remediation
    - name: 5.1.1.7 Ensure rsyslog is not configured to receive logs from a remote client | Remediation
      lineinfile:
        path: "{{ item }}"
        regexp: '.*input\(type="imtcp" port="514"\)'
        state: absent
      loop: "{{ rsyslog_conf_files }}"
      when: not audit_only and not rsyslog_as_log_server_check.remediation_status
   
    # 5.1.1.7 Ensure rsyslog is not configured to receive logs from a remote client | Remediation
    - name: 5.1.1.7 Ensure rsyslog is not configured to receive logs from a remote client | Remediation
      service:
        name: rsyslog
        state: restarted
      when: not audit_only and not rsyslog_as_log_server_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"