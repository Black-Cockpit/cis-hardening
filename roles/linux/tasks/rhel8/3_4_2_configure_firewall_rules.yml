# 3.4.2 Configure firewall rules
- name: 3.4.2 Configure firewall rules
  block:
  # 3.4.2.1 Ensure nftables base chains exist
  #
  # Chains are containers for rules. They exist in two kinds, base chains and regular chains.
  # A base chain is an entry point for packets from the networking stack, a regular chain
  # may be used as jump target and is used for better rule organization.
  - name: "3.4.2.1 Ensure nftables base chains exist"
    block:
    # Extract audit result (Not applicable since firewalld is forced and by default firewalld add base chains)
    - set_fact:
        nftables_base_chain_check:
          name: 3.4.2.1 Ensure nftables base chains exist
          scored: false
          automated: true
      changed_when: false
    
    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [nftables_base_chain_check] }}"
      changed_when: false
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.4.2.2 Ensure host based firewall loopback traffic is configured
  #
  # Configure the loopback interface to accept traffic. Configure all other interfaces to deny
  # traffic to the loopback network
  - name: "3.4.2.2 Ensure host based firewall loopback traffic is configured"
    block:
    # 3.4.2.2 Ensure host based firewall loopback traffic is configured | Audit
    # Check if network traffic to the loopback address is correctly set to accept
    - name: 3.4.2.2 Ensure host based firewall loopback traffic is configured | Audit
      shell:
        cmd: |
          nft list ruleset | awk '/hook\s+input\s+/,/\}\s*(#.*)?$/' | \
          grep -Pq -- '\H+\h+"lo"\h+accept' && \
          echo configured || echo not_configured
      changed_when: false
      register: loopback_newtwork_traffic_status_check

    # Define remediation status
    - set_fact: 
        firewall_looppack_traffic_conf_remediation_status: "{{ true if loopback_newtwork_traffic_status_check.stdout == 'configured' else false }}"
      changed_when: false

    # 3.4.2.2 Ensure host based firewall loopback traffic is configured | Audit
    # Check if IPv4 network traffic from loopback address is correctly set to drop
    - name: 3.4.2.2 Ensure host based firewall loopback traffic is configured | Audit
      shell:
        cmd: |
          l_ipsaddr="$(nft list ruleset | awk '/filter_IN_public_deny|hook\s+input\s+/,/\}\s*(#.*)?$/' | grep -P -- 'ip\h+saddr')";
          grep -Pq -- 'ip\h+saddr\h+127\.0\.0\.0\/8\h+(counter\h+packets\h+\d+\h+bytes\h+\d+\h+)?drop' <<<"$l_ipsaddr" || \
          grep -Pq -- 'ip\h+daddr\h+\!\=\h+127\.0\.0\.1\h+ip\h+saddr\h+127\.0\.0\.1\h+drop' <<<"$l_ipsaddr" && \
          echo configured || echo not_configured
      changed_when: false
      register: ipv4_loopback_newtwork_traffic_status_check
      when: firewall_looppack_traffic_conf_remediation_status

    # Define remediation status
    - set_fact: 
        firewall_looppack_traffic_conf_remediation_status: "{{ true if ipv4_loopback_newtwork_traffic_status_check.stdout == 'configured' else false }}"
      changed_when: false
      when: firewall_looppack_traffic_conf_remediation_status

    # 3.4.2.2 Ensure host based firewall loopback traffic is configured | Audit
    # Check if IPv6 network traffic from loopback address is correctly set to drop
    - name: 3.4.2.2 Ensure host based firewall loopback traffic is configured | Audit
      shell:
        cmd: |
          l_ip6saddr="$(nft list ruleset | awk '/filter_IN_public_deny|hook input/,/}/' | grep 'ip6 saddr')";
          grep -Pq 'ip6\h+saddr\h+::1\h+(counter\h+packets\h+\d+\h+bytes\h+\d+\h+)?drop' <<<"$l_ip6saddr" || \
          grep -Pq -- 'ip6\h+daddr\h+\!=\h+::1\h+ip6\h+saddr\h+::1\h+drop' <<<"$l_ip6saddr" && \
          echo configured || echo not_configured
      changed_when: false
      register: ipv6_loopback_newtwork_traffic_status_check
      when: firewall_looppack_traffic_conf_remediation_status

    # Define remediation status
    - set_fact: 
        firewall_looppack_traffic_conf_remediation_status: "{{ true if ipv6_loopback_newtwork_traffic_status_check.stdout == 'configured' else false }}"
      changed_when: false
      when: firewall_looppack_traffic_conf_remediation_status

    # Extract audit result
    - set_fact:
        firewall_looppack_traffic_conf_check:
          name: 3.4.2.2 Ensure host based firewall loopback traffic is configured
          scored: true
          automated: true
          remediation_status: "{{ true if firewall_looppack_traffic_conf_remediation_status else false }}"
      changed_when: false

    # 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
    # Set network traffic to the loopback address to accept
    - name: 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
      firewalld:
        zone: trusted
        permanent: true
        state: enabled
        interface: lo
      when: not audit_only and not firewall_looppack_traffic_conf_check.remediation_status

    # 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
    # Set IPv4 network traffic to the loopback address to drop
    - name: 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
      firewalld:
        rich_rule: 'rule family=ipv4 source address="127.0.0.1" destination not address="127.0.0.1" drop'
        permanent: true
        state: enabled
      when: not audit_only and not firewall_looppack_traffic_conf_check.remediation_status

    # 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
    # Set IPv4 network traffic to the loopback address to drop
    - name: 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
      firewalld:
        zone: trusted
        rich_rule: 'rule family=ipv4 source address="127.0.0.1" destination not address="127.0.0.1" drop'
        permanent: true
        state: enabled
      when: not audit_only and not firewall_looppack_traffic_conf_check.remediation_status

    # 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
    # Set IPv6 network traffic to the loopback address to drop
    - name: 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
      firewalld:
        rich_rule: 'rule family=ipv6 source address="::1" destination not address="::1" drop'
        permanent: true
        state: enabled
      when: not audit_only and not firewall_looppack_traffic_conf_check.remediation_status

    # 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
    # Set IPv6 network traffic to the loopback address to drop
    - name: 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
      firewalld:
        zone: trusted
        rich_rule: 'rule family=ipv6 source address="::1" destination not address="::1" drop'
        permanent: true
        state: enabled
      when: not audit_only and not firewall_looppack_traffic_conf_check.remediation_status

    # 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
    - name: 3.4.2.2 Ensure host based firewall loopback traffic is configured | Remediation
      systemd:
        name: firewalld
        state: reloaded
        force: true
      when: not audit_only and not firewall_looppack_traffic_conf_check.remediation_status 

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [firewall_looppack_traffic_conf_check] }}"
      changed_when: false

    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.4.2.3 Ensure firewalld drops unnecessary services and ports
  #
  # Services and ports can be accepted or explicitly rejected or dropped by a zone.
  #
  # For every zone, you can set a default behavior that handles incoming traffic that is not
  # further specified. Such behavior is defined by setting the target of the zone. There are
  # three options - default, ACCEPT, REJECT, and DROP.
  #
  #   - ACCEPT: you accept all incoming packets except those disabled by a specific
  #             rule.
  #   - REJECT: you disable all incoming packets except those that you have allowed
  #             in specific rules and the source machine is informed about the rejection.
  #   - DROP:   you disable all incoming packets except those that you have allowed in
  #            specific rules and no information sent to the source machine.
  - name: "3.4.2.3 Ensure firewalld drops unnecessary services and ports"
    block:
    # 3.4.2.3 Ensure firewalld drops unnecessary services and ports | Audit
    - name: 3.4.2.3 Ensure firewalld drops unnecessary services and ports | Audit
      shell:
        cmd: |
          systemctl is-enabled firewalld.service | grep -q 'enabled' && \
          firewall-cmd --list-all --zone="$(firewall-cmd --list-all | awk '/\(active\)/ { print $1}')" | grep -P -- '^\h*(services:|ports:)'
      changed_when: false
      register: unnecessary_services_status_check

    # Extract audit result
    - set_fact:
        unnecessary_services_check:
          name: 3.4.2.3 Ensure firewalld drops unnecessary services and ports
          scored: false
          automated: false
          remediation: "Consider to verify the list of enabled firewall services bellow: \n {{ unnecessary_services_status_check.stdout }}"
      changed_when: false
    
    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [unnecessary_services_check] }}"
      changed_when: false
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.4.2.4 Ensure nftables established connections are configured
  #
  # Configure the firewall rules for new outbound and established connections
  - name: "3.4.2.4 Ensure nftables established connections are configured"
    block:
    # Extract audit result (Not applicable since firewalld is forced and by default firewalld add base chains)
    - set_fact:
        nftables_established_connections_check:
          name: 3.4.2.4 Ensure nftables established connections are configured
          scored: false
          automated: false
      changed_when: false
    
    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [nftables_established_connections_check] }}"
      changed_when: false
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.4.2.5 Ensure nftables default deny firewall policy
  #
  # Base chain policy is the default verdict that will be applied to packets reaching the end
  # of the chain.
  - name: "3.4.2.5 Ensure nftables default deny firewall policy"
    block:
    # Extract audit result (Not applicable since firewalld is forced and by default firewalld add base chains)
    - set_fact:
        nftables_base_chain_policy_check:
          name: 3.4.2.5 Ensure nftables default deny firewall policy
          scored: false
          automated: true
      changed_when: false
    
    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [nftables_base_chain_policy_check] }}"
      changed_when: false
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"