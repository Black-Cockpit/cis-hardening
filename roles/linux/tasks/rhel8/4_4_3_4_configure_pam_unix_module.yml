# 4.4.3.4 Configure pam_unix module
- name: 4.4.3.4 Configure pam_unix module
  block:
  # 4.4.3.4.1 Ensure pam_unix does not include nullok
  #
  # The nullok argument overrides the default action of pam_unix.so to not permit the user
  # access to a service if their official password is blank.
  - name: "4.4.3.4.1 Ensure pam_unix does not include nullok"
    block:
    # 4.4.3.4.1 Ensure pam_unix does not include nullok | Audit
    - name: 4.4.3.4.1 Ensure pam_unix does not include nullok | Audit
      shell:
        cmd: |
          # Extract pam_unix configuration
          pam_unix=$(grep -P -- '^\h*(auth|account|password|session)\h+(requisite|required|sufficient)\h+pam_unix\.so\b' /etc/pam.d/{password,system}-auth)

          # Check if pam_unix configuration has nullok and return audit result
          echo "$pam_unix" | grep -Pq -- '\bnullok\b' && echo 'not_configured' || echo 'configured'
      changed_when: false
      register: pam_unix_nullok_status_check

    # Extract audit result
    - set_fact:
        pam_unix_nullok_check:
          name: 4.4.3.4.1 Ensure pam_unix does not include nullok
          scored: true
          automated: true
          remediation_status: "{{ true if pam_unix_nullok_status_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [pam_unix_nullok_check] }}"
      changed_when: false

    # 4.4.3.4.1 Ensure pam_unix does not include nullok | Remediation
    - name: 4.4.3.4.1 Ensure pam_unix does not include nullok | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              module_name="unix"
              profile_name="$(head -1 /etc/authselect/authselect.conf)"

              if [[ "$profile_name" =~ ^custom\/ ]]; then
                  unix_pam=$(grep -P -- "\bpam_$module_name\.so\b" /etc/authselect/$profile_name/{password,system}-auth)

                  if echo "$unix_pam" | grep -Pq -- ".+(if)[\s]{1,}(not)[\s]{1,}(\"without-nullok\":nullok)+."; then
                      authselect enable-feature without-nullok
                      authselect apply-changes
                  elif echo "$unix_pam" | grep -Pq -- "nullok"; then
                      for pam_file in system-auth password-auth; do
                          authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$pam_file"
                          sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so\s+.*)(nullok)(\s*.*)$/\1\2\4/g' $authselect_file
                      done
                      authselect apply-changes
                  fi
              fi
          fi
      when: not audit_only and not pam_unix_nullok_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.4.2 Ensure pam_unix does not include remember
  #
  # The remember=n argument saves the last n passwords for each user in
  # /etc/security/opasswd in order to force password change history and keep the user
  # from alternating between the same password too frequently. The MD5 password hash
  # algorithm is used for storing the old passwords. Instead of this option the pam_pwhistory
  # module should be used. The pam_pwhistory module saves the last n passwords for
  # each user in /etc/security/opasswd using the password hash algorithm set on the
  # pam_unix module. This allows for the sha512 hash algorithm to be used.
  - name: "4.4.3.4.2 Ensure pam_unix does not include remember"
    block:
    # 4.4.3.4.2 Ensure pam_unix does not include remember | Audit
    - name: 4.4.3.4.2 Ensure pam_unix does not include remember | Audit
      shell:
        cmd: |
          # Extract remember configuration
          remember=$(grep -P -- '^\h*password\h+([^#\n\r]+\h+)?pam_unix\.so\b' /etc/pam.d/{password,system}-auth)

          # Check if remember configuration has nullok and return audit result
          echo "$remember" | grep -Pq -- '\bremember=\d\b' && echo 'not_configured' || echo 'configured'
      changed_when: false
      register: pam_unix_remember_status_check

    # Extract audit result
    - set_fact:
        pam_unix_remember_check:
          name: 4.4.3.4.2 Ensure pam_unix does not include remember
          scored: true
          automated: true
          remediation_status: "{{ true if pam_unix_remember_status_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [pam_unix_remember_check] }}"
      changed_when: false

    # 4.4.3.4.2 Ensure pam_unix does not include remember | Remediation
    - name: 4.4.3.4.2 Ensure pam_unix does not include remember | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              pam_profile="$(head -1 /etc/authselect/authselect.conf)"

              if grep -Pq -- '^custom\/' <<<"$pam_profile"; then
                  pam_profile_path="/etc/authselect/$pam_profile"
              else
                  pam_profile_path="/usr/share/authselect/default/$pam_profile"
              fi

              remember=$(grep -P -- '^\h*password\h+([^#\n\r]+\h+)pam_unix\.so\b' "$l_pam_profile_path"/{password,system}-auth)

              if echo "$remember" | grep -Pq -- '\bremember=\d\b'; then
                  for authselect_file in "$pam_profile_path"/password-auth" $pam_profile_path"/system-auth; do
                      sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so\s+.*)(remember=[1-9][0-9]*)(\s*.*)$/\1\4/g' "$authselect_file"
                  done
                   authselect apply-changes
              fi
          fi
      when: not audit_only and not pam_unix_remember_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.4.3 Ensure pam_unix includes a strong password hashing algorithm
  #
  # A cryptographic hash function converts an arbitrary-length input into a fixed length
  # output. Password hashing performs a one-way transformation of a password, turning
  # the password into another string, called the hashed password.
  - name: "4.4.3.4.3 Ensure pam_unix includes a strong password hashing algorithm"
    block:
    # 4.4.3.4.3 Ensure pam_unix includes a strong password hashing algorithm | Audit
    - name: 4.4.3.4.3 Ensure pam_unix includes a strong password hashing algorithm | Audit
      shell:
        cmd: |
          password_with_strong_hashing_lines=$(grep -P -- '^\h*password\h+([^#\n\r]+)\h+pam_unix\.so\h+([^#\n\r]+\h+)?(sha512|yescrypt)\b' /etc/pam.d/{password,system}-auth | wc -l)
          password_lines=$(grep -P -- '^\h*password\h+([^#\n\r]+)\h+pam_unix\.so\h+([^#\n\r]+\h+)?\b' /etc/pam.d/{password,system}-auth | wc -l)

          [[ "$password_lines" -eq "$password_with_strong_hashing_lines" ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: pam_unix_password_hashing_status_check

    # Extract audit result
    - set_fact:
        pam_unix_password_hashing_check:
          name: 4.4.3.4.3 Ensure pam_unix includes a strong password hashing algorithm
          scored: true
          automated: true
          remediation_status: "{{ true if pam_unix_password_hashing_status_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [pam_unix_password_hashing_check] }}"
      changed_when: false

    # 4.4.3.4.3 Ensure pam_unix includes a strong password hashing algorithm | Remediation
    - name: 4.4.3.4.3 Ensure pam_unix includes a strong password hashing algorithm | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              pam_profile="$(head -1 /etc/authselect/authselect.conf)"

              if grep -Pq -- '^custom\/' <<<"$pam_profile"; then
                  pam_profile_path="/etc/authselect/$pam_profile"
              else
                  pam_profile_path="/usr/share/authselect/default/$pam_profile"
              fi

              for authselect_file in "$pam_profile_path"/password-auth "$pam_profile_path"/system-auth; do
                  if grep -Pq '^\h*password\h+()\h+pam_unix\.so\h+([^#\n\r]+\h+)?(md5|bigcrypt|sha256|blowfish)\b' "$authselect_file"; then
                      sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so\s+.*)(md5|bigcrypt|sha256|blowfish)(\s*.*)$/\1\4 sha512/g' "$authselect_file"
                  else
                      sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so\s+.*)$/&sha512/g' "$authselect_file"
                  fi
              done
              authselect apply-changes
          fi
      when: not audit_only and not pam_unix_password_hashing_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.4.4 Ensure pam_unix includes use_authtok
  #
  # use_authtok: When password changing enforce the module to set the new password to
  # the one provided by a previously stacked password module
  - name: "4.4.3.4.4 Ensure pam_unix includes use_authtok"
    block:
    # 4.4.3.4.4 Ensure pam_unix includes use_authtok | Audit
    - name: 4.4.3.4.4 Ensure pam_unix includes use_authtok | Audit
      shell:
        cmd: |
          pam_unix_with_use_authtok_lines=$(grep -P -- '^\h*password\h+([^#\n\r]+)\h+pam_unix\.so\h+([^#\n\r]+\h+).*[\s](use_authtok).*\b' /etc/pam.d/{password,system}-auth | wc -l)
          pam_unix_lines=$(grep -P -- '^\h*password\h+([^#\n\r]+)\h+pam_unix\.so\h+([^#\n\r]+\h+)?\b' /etc/pam.d/{password,system}-auth | wc -l)

          [[ "$pam_unix_lines" -eq "$pam_unix_with_use_authtok_lines" ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: pam_unix_use_authtok_status_check

    # Extract audit result
    - set_fact:
        pam_unix_use_authtok_check:
          name: 4.4.3.4.4 Ensure pam_unix includes use_authtok
          scored: true
          automated: true
          remediation_status: "{{ true if pam_unix_use_authtok_status_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [pam_unix_use_authtok_check] }}"
      changed_when: false

    # 4.4.3.4.4 Ensure pam_unix includes use_authtok | Remediation
    - name: 4.4.3.4.4 Ensure pam_unix includes use_authtok | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              pam_profile="$(head -1 /etc/authselect/authselect.conf)"

              if grep -Pq -- '^custom\/' <<<"$pam_profile"; then
                  pam_profile_path="/etc/authselect/$pam_profile"
              else
                  pam_profile_path="/usr/share/authselect/default/$pam_profile"
              fi

              for authselect_file in "$pam_profile_path"/password-auth "$pam_profile_path"/system-auth; do
                  if ! grep -Pq '^\h*password\h+([^#\n\r]+)\h+pam_unix\.so\h+([^#\n\r]+\h+).*[\s](use_authtok).*\b' "$l_authselect_file"; then
                      sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_unix\.so\s+.*)$/&use_authtok/g' "$l_authselect_file"
                  fi
              done
              authselect apply-changes
          fi
      when: not audit_only and not pam_unix_use_authtok_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"
