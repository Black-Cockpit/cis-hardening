# 4.3 Configure privilege escalation
- name: 4.3 Configure privilege escalation
  block:
  # 4.3.1 Ensure sudo is installed
  #
  # sudo allows a permitted user to execute a command as the superuser or another user,
  # as specified by the security policy. The invoking user's real (not effective) user ID is
  # used to determine the user name with which to query the security policy.
  - name: "4.3.1 Ensure sudo is installed"
    block:
    # 4.3.1 Ensure sudo is installed | Audit
    - name: 4.3.1 Ensure sudo is installed | Audit
      shell:
        cmd: rpm -qa | grep -Eq '^sudo[-][0-9]' && echo installed || not_installed
      changed_when: false
      register: sudo_status_check

    - set_fact:
        sudo_check:
          name: 4.3.1 Ensure sudo is installed
          scored: true
          automated: true
          remediation_status: "{{ true if sudo_status_check.stdout == 'installed' else false }}"
      # Extract audit result
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [sudo_check] }}"
      changed_when: false

    # 4.3.1 Ensure sudo is installed | Remediation
    - name: 4.3.1 Ensure sudo is installed | Remediation
      package:
        name: sudo
        state: present
      when: not audit_only and not sudo_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.3.2 Ensure sudo commands use pty
  #
  # sudo can be configured to run only from a pseudo terminal ( pseudo-pty ).
  - name: "4.3.2 Ensure sudo commands use pty"
    block:
    # 4.3.2 Ensure sudo commands use pty | Audit
    - name: 4.3.2 Ensure sudo commands use pty | Audit
      shell:
        cmd: |
          grep -Piq '^\h*Defaults\h+([^#\n\r]+,)?use_pty(,\h*\h+\h*)*\h*(#.*)?$' {{ item }} && echo 'configured' \
          || echo 'not_configured'
      changed_when: false
      loop: "{{ sudoers_files }}"
      failed_when: sudoers_files is not defined
      register: pseudo_terminal_status_check

    # Define remediation status
    - set_fact:
        pseudo_terminal_remediation_status: true
      changed_when: false

    # Check if pseudo terminal is configured in all the listed sudoers files
    - set_fact:
        pseudo_terminal_remediation_status: "{{ true if (pseudo_terminal_remediation_status and item.stdout == 'configured') else false }}"
      changed_when: false
      loop_control:
        label: "{{ item.stdout }}"
      loop: "{{ pseudo_terminal_status_check.results | list }}"

    - set_fact:
        pseudo_terminal_check:
          name: 4.3.2 Ensure sudo commands use pty
          scored: true
          automated: true
          remediation_status: "{{ true if pseudo_terminal_remediation_status else false }}"
      # Extract audit result
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [pseudo_terminal_check] }}"
      changed_when: false

    # 4.3.2 Ensure sudo commands use pty | Remediation
    - name: 4.3.2 Ensure sudo commands use pty | Remediation
      lineinfile:
        path: "{{ item }}"
        regexp: '^Defaults[\s]{1,}use_pty'
        line: "Defaults use_pty"
        state: present
      loop: "{{ sudoers_files }}"
      when: not audit_only and not sudo_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.3.3 Ensure sudo log file exists
  #
  # The Defaults logfile entry sets the path to the sudo log file. Setting a path turns on
  # logging to a file; negating this option turns it off. By default, sudo logs via syslog.
  - name: "4.3.3 Ensure sudo log file exists"
    block:
    # 4.3.3 Ensure sudo log file exists | Audit
    - name: 4.3.3 Ensure sudo log file exists | Audit
      shell:
        cmd: |
          grep -Piq "^\h*Defaults\h+([^#]+,\h*)?logfile\h*=\h*(\"|\')?\H+(\"|\')?(,\h*\H+\h*)*\h*(#.*)?$" {{ item }} && echo 'configured' \
          || echo 'not_configured'
      changed_when: false
      loop: "{{ sudoers_files }}"
      failed_when: sudoers_files is not defined
      register: sudo_log_file_status_check

    # Define remediation status
    - set_fact:
        sudo_log_file_remediation_status: true
      changed_when: false

    # Check if pseudo terminal is configured in all the listed sudoers files
    - set_fact:
        sudo_log_file_remediation_status: "{{ true if (sudo_log_file_remediation_status and item.stdout == 'configured') else false }}"
      changed_when: false
      loop_control:
        label: "{{ item.stdout }}"
      loop: "{{ sudo_log_file_status_check.results | list }}"

    - set_fact:
        sudo_log_file_check:
          name: 4.3.3 Ensure sudo log file exists
          scored: true
          automated: true
          remediation_status: "{{ true if sudo_log_file_remediation_status else false }}"
      # Extract audit result
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [sudo_log_file_check] }}"
      changed_when: false

    # 4.3.3 Ensure sudo log file exists | Remediation
    - name: 4.3.3 Ensure sudo log file exists | Remediation
      lineinfile:
        path: "{{ item }}"
        regexp: '^Defaults logfile='
        line: 'Defaults logfile="/var/log/sudo.log"'
        state: present
      loop: "{{ sudoers_files }}"
      when: not audit_only and not sudo_log_file_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.3.4 Ensure users must provide password for escalation
  #
  # The operating system must be configured so that users must provide a password for
  # privilege escalation.
  - name: "4.3.4 Ensure users must provide password for escalation"
    block:
    # 4.3.4 Ensure users must provide password for escalation | Audit
    - name: 4.3.4 Ensure users must provide password for escalation | Audit
      shell:
        cmd: |
          grep -Piq "^[^#].*NOPASSWD" {{ item }} && echo 'not_configured' || echo 'configured'
      changed_when: false
      loop: "{{ sudoers_files }}"
      failed_when: sudoers_files is not defined
      register: sudo_no_password_status_check

    # Define remediation status
    - set_fact:
        sudo_no_password_remediation_status: true
      changed_when: false

    # Check if pseudo terminal is configured in all the listed sudoers files
    - set_fact:
        sudo_no_password_remediation_status: "{{ true if (sudo_no_password_remediation_status and item.stdout == 'configured') else false }}"
      changed_when: false
      loop_control:
        label: "{{ item.stdout }}"
      loop: "{{ sudo_no_password_status_check.results | list }}"

    - set_fact:
        sudo_no_password_check:
          name: 4.3.4 Ensure users must provide password for escalation
          scored: true
          automated: true
          remediation_status: "{{ true if sudo_no_password_remediation_status else false }}"
      # Extract audit result
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [sudo_no_password_check] }}"
      changed_when: false

    # 4.3.4 Ensure users must provide password for escalation | Remediation
    - name: 4.3.4 Ensure users must provide password for escalation | Remediation
      replace:
        path: "{{ item }}"
        regexp: 'NOPASSWD:'
        replace: ''
      loop: "{{ sudoers_files }}"
      when: not audit_only and not sudo_no_password_check.remediation_status
    tags:
    - "server_level_2"
    - "workstation_level_2"
    when: "'server_level_2' in levels or 'workstation_level_2' in levels"



  # 4.3.5 Ensure re-authentication for privilege escalation is not disabled globally
  #
  # The operating system must be configured so that users must re-authenticate for
  # privilege escalation.
  - name: "4.3.5 Ensure re-authentication for privilege escalation is not disabled globally"
    block:
    # 4.3.5 Ensure re-authentication for privilege escalation is not disabled globally | Audit
    - name: 4.3.5 Ensure re-authentication for privilege escalation is not disabled globally | Audit
      shell:
        cmd: |
          grep -Piq "^[^#].*\!authenticate" {{ item }} && echo 'not_configured' || echo 'configured'
      changed_when: false
      loop: "{{ sudoers_files }}"
      failed_when: sudoers_files is not defined
      register: sudo_re_authentication_status_check

    # Define remediation status
    - set_fact:
        sudo_re_authentication_status: true
      changed_when: false

    # Check if pseudo terminal is configured in all the listed sudoers files
    - set_fact:
        sudo_re_authentication_status: "{{ true if (sudo_re_authentication_status and item.stdout == 'configured') else false }}"
      changed_when: false
      loop_control:
        label: "{{ item.stdout }}"
      loop: "{{ sudo_re_authentication_status_check.results | list }}"

    - set_fact:
        sudo_re_authentication_status_check:
          name: 4.3.5 Ensure re-authentication for privilege escalation is not disabled globally
          scored: true
          automated: true
          remediation_status: "{{ true if sudo_re_authentication_status else false }}"
      # Extract audit result
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [sudo_re_authentication_status_check] }}"
      changed_when: false

    # 4.3.5 Ensure re-authentication for privilege escalation is not disabled globally | Remediation
    - name: 4.3.5 Ensure re-authentication for privilege escalation is not disabled globally | Remediation
      replace:
        path: "{{ item }}"
        regexp: '^[^#].*\!authenticate:'
        replace: ''
      loop: "{{ sudoers_files }}"
      when: not audit_only and not sudo_re_authentication_status_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.3.6 Ensure sudo authentication timeout is configured correctly
  #
  # sudo caches used credentials for a default of 5 minutes. This is for ease of use when
  # there are multiple administrative tasks to perform. The timeout can be modified to suit
  # local security policies.
  - name: "4.3.6 Ensure sudo authentication timeout is configured correctly"
    block:
    # 4.3.6 Ensure sudo authentication timeout is configured correctly | Audit
    - name: 4.3.6 Ensure sudo authentication timeout is configured correctly | Audit
      shell:
        cmd: |
          # Check if sudo authentication timestamp timeout si greater than 15 minute
          if [[ "$(sudo -V | grep "Authentication timestamp timeout:" | awk '{print $4}' | awk -F '.' '{print $1}')" -gt 15 ]]; then
              echo 'not_configured'
          else
              echo "configured"
          fi
      changed_when: false
      register: sudo_authentication_timeout_status_check

    # 4.3.6 Ensure sudo authentication timeout is configured correctly | Audit
    - name: 4.3.6 Ensure sudo authentication timeout is configured correctly | Audit
      shell:
        cmd: |
          # Init audit result
          sudoers_file_audit='configured'

          # Check if the sudoers file has an authentication timestamp timeout si greater than 15 minute
          for i in $(grep -Po "timestamp_timeout=\K[0-9]*" {{ item }} | awk -F '.' '{print $1}' || echo '5'); do
              if [[ "$i" -gt 15 ]]; then
                  sudoers_file_audit='not_configured'
                  break
              fi
          done

          echo "$sudoers_file_audit"
      changed_when: false
      loop: "{{ sudoers_files }}"
      failed_when: sudoers_files is not defined
      register: sudoers_files_authentication_timeout_status_status_check

    # Define remediation status
    - set_fact:
        sudo_authentication_timeout_status: "{{ true if sudo_authentication_timeout_status_check.stdout == 'configured' else false }}"
      changed_when: false

    # Check if pseudo terminal is configured in all the listed sudoers files
    - set_fact:
        sudo_authentication_timeout_status: "{{ true if (sudo_authentication_timeout_status and item.stdout == 'configured') else false }}"
      changed_when: false
      loop_control:
        label: "{{ item.stdout }}"
      loop: "{{ sudoers_files_authentication_timeout_status_status_check.results | list }}"

    - set_fact:
        sudo_authentication_timeout_check:
          name: 4.3.6 Ensure sudo authentication timeout is configured correctly
          scored: true
          automated: true
          remediation_status: "{{ true if sudo_authentication_timeout_status else false }}"
      # Extract audit result
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [sudo_authentication_timeout_check] }}"
      changed_when: false

    - name: 4.3.6 Ensure sudo authentication timeout is configured correctly | Remediation
      # 4.3.6 Ensure sudo authentication timeout is configured correctly | Remediation
      lineinfile:
        path: "{{ item }}"
        regexp: '^Defaults[\s]{1,}.+timestamp_timeout'
        state: absent
      loop: "{{ sudoers_files }}"
      when: not audit_only and not sudo_authentication_timeout_check.remediation_status

    - name: 4.3.6 Ensure sudo authentication timeout is configured correctly | Remediation
      # 4.3.6 Ensure sudo authentication timeout is configured correctly | Remediation
      lineinfile:
        path: "{{ item }}"
        regexp: '^Defaults[\s]{1,}env_reset'
        state: absent
      loop: "{{ sudoers_files }}"
      when: not audit_only and not sudo_authentication_timeout_check.remediation_status

    - name: 4.3.6 Ensure sudo authentication timeout is configured correctly | Remediation
      # 4.3.6 Ensure sudo authentication timeout is configured correctly | Remediation
      lineinfile:
        path: "{{ item }}"
        regexp: '^Defaults timestamp_timeout=15'
        line: "Defaults timestamp_timeout=15"
        state: present
      loop: "{{ sudoers_files }}"
      when: not audit_only and not sudo_authentication_timeout_check.remediation_status

    - name: 4.3.6 Ensure sudo authentication timeout is configured correctly | Remediation
      # 4.3.6 Ensure sudo authentication timeout is configured correctly | Remediation
      lineinfile:
        path: "{{ item }}"
        regexp: '^Defaults env_reset'
        line: "Defaults env_reset"
        state: present
      loop: "{{ sudoers_files }}"
      when: not audit_only and not sudo_authentication_timeout_check.remediation_status

    # 4.3.6 Ensure sudo authentication timeout is configured correctly | Remediation
    - name: 4.3.6 Ensure sudo authentication timeout is configured correctly | Remediation
      lineinfile:
        path: "{{ item }}"
        regexp: '^Defaults env_reset, timestamp_timeout=15'
        line: "Defaults env_reset, timestamp_timeout=15"
        state: present
      loop: "{{ sudoers_files }}"
      when: not audit_only and not sudo_authentication_timeout_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.3.7 Ensure access to the su command is restricted
  #
  # The su command allows a user to run a command or shell as another user. The
  # program has been superseded by sudo , which allows for more granular control over
  # privileged access. Normally, the su command can be executed by any user. By
  # uncommenting the pam_wheel.so statement in /etc/pam.d/su , the su command will only
  # allow users in a specific groups to execute su . This group should be empty to reinforce
  # the use of sudo for privileged access.
  - name: "4.3.7 Ensure access to the su command is restricted"
    block:
    # 4.3.7 Ensure access to the su command is restricted | Audit
    - name: 4.3.7 Ensure access to the su command is restricted | Audit
      shell:
        cmd: |
          su_group=$(grep -Pi '^\h*auth\h+(?:required|requisite)\h+pam_wheel\.so\h+(?:[^#\n\r]+\h+)?((?!\2)(use_uid\b|group=\H+\b))\h+(?:[^#\n\r]+\h+)?((?!\1)(use_uid\b|group=\H+\b))(\h+.*)?$' /etc/pam.d/su | awk -F '=' '{print $2}' || echo '')
          echo $su_group
      changed_when: false
      register: sudo_access_restrection_status_check

    # Define remediation status
    - set_fact:
        sudo_access_restrection_status: "{{ true if sudo_access_restrection_status_check.stdout != '' else false }}"
      changed_when: false

    # 4.3.7 Ensure access to the su command is restricted | Audit
    # Check if su group has users
    - name: 4.3.7 Ensure access to the su command is restricted | Audit
      shell:
        cmd: |
          gid=$(cat /etc/group | grep {{ sudo_access_restrection_status_check.stdout }} | awk -F ':' '{print $3}')
          cat /etc/passwd | awk -F ':' '{print $4}' | grep $gid | wc -l
      changed_when: false
      register: su_group_users_check
      when: sudo_access_restrection_status

    # Update remediation status
    - set_fact:
        sudo_access_restrection_status: "{{ true if (sudo_access_restrection_status and su_group_users_check.stdout == '0') else false }}"
      changed_when: false

    # Extract audit result
    - set_fact:
        sudo_access_restrection_check:
          name: 4.3.7 Ensure access to the su command is restricted
          scored: true
          automated: true
          remediation_status: "{{ true if sudo_access_restrection_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [sudo_access_restrection_check] }}"
      changed_when: false

    # Define su group name
    # Randomized to ensure the the group is not duplicated
    - set_fact:
        su_group_name: "su_group_{{ lookup('password', '/dev/null chars=ascii_letters length=4', seed=inventory_hostname) | lower }}"
      changed_when: false
      when: not audit_only and not sudo_access_restrection_check.remediation_status

    # 4.3.7 Ensure access to the su command is restricted | Remediation
    - name: 4.3.7 Ensure access to the su command is restricted | Remediation
      group:
        name: "{{ su_group_name }}"
        state: present
      when: not audit_only and not sudo_access_restrection_check.remediation_status

    - name: 4.3.7 Ensure access to the su command is restricted | Remediation
      # 4.3.7 Ensure access to the su command is restricted | Remediation
      lineinfile:
        path: "/etc/pam.d/su"
        regexp: '^auth[\s]{1,}required[\s]{1,}pam_wheel[.]so[\s]{1,}use_uid[\s]{1,}group='
        state: absent
      when: not audit_only and not sudo_access_restrection_check.remediation_status

    - name: 4.3.7 Ensure access to the su command is restricted | Remediation
      # 4.3.7 Ensure access to the su command is restricted | Remediation
      lineinfile:
        path: "/etc/pam.d/su"
        regexp: '^auth[\s]{1,}required[\s]{1,}pam_wheel[.]so[\s]{1,}use_uid[\s]{1,}group='
        line: "auth required pam_wheel.so use_uid group={{ su_group_name }}"
        state: present
      when: not audit_only and not sudo_access_restrection_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"
