- name: "Pre Audit | Listing pwquality configuration files"
  block:
  # Stat /etc/security/pwquality.conf.d/ directory
  - name: "Pre Audit | Stat /etc/security/pwquality.conf.d/ directory"
    stat:
      path: /etc/security/pwquality.conf.d/
    changed_when: false
    register: pwquality_directory

  # List /etc/security/pwquality.conf.d/ configuration files
  - name: "Pre Audit | List /etc/security/pwquality.conf.d/ directory configuration files"
    find:
      paths:
        - /etc/security/pwquality.conf.d/
      patterns:
        - "*.conf"
      file_type: file
    changed_when: false
    register: pwquality_directory_files
    when: pwquality_directory.stat.exists

# 4.4.3.2 Configure pam_pwquality module
- name: 4.4.3.2 Configure pam_pwquality module
  block:
  # 4.4.3.2.1 Ensure password number of changed characters is configured
  #
  # The pwquality difok option sets the number of characters in a password that must not be present in the old password.
  - name: "4.4.3.2.1 Ensure password number of changed characters is configured"
    block:
    # 4.4.3.2.1 Ensure password number of changed characters is configured | Audit
    - name: 4.4.3.2.1 Ensure password number of changed characters is configured | Audit
      shell:
        cmd: |
          difok=$(awk -F '=' '{print $2}' <<< $(grep -Pi -- '^\h*difok\h*=\h*([2-9]|[1-9][0-9]+)\b' /etc/security/pwquality.conf  || echo "difok = 0"))
          [[ "$difok" -gt 1 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_number_status_check

    # 4.4.3.2.1 Ensure password number of changed characters is configured | Audit
    - name: 4.4.3.2.1 Ensure password number of changed characters is configured | Audit
      shell:
        cmd: |
          if [ -f /etc/pam.d/system-auth ]; then
              grep -Pi -- '^\h*password\h+(requisite|required|sufficient)\h+pam_pwquality\.so\h+([^#\n\r]+\h+)?difok\h*=\h*([0-1])\b' /etc/pam.d/system-auth && \
                  echo 'not_configured' || echo 'configured'
          else
              echo 'not_configured'
          fi
      changed_when: false
      register: system_auth_password_number_status_check

    # Extract audit result
    - set_fact:
        password_number_check:
          name: 4.4.3.2.1 Ensure password number of changed characters is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (password_number_status_check.stdout == 'configured' and system_auth_password_number_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_number_check] }}"
      changed_when: false

    # 4.4.3.2.1 Ensure password number of changed characters is configured | Remediation
    - name: 4.4.3.2.1 Ensure password number of changed characters is configured | Remediation
      replace:
        path: "{{ item.path }}"
        regexp: '^(#difok|difok)[\s]{0,}=.+'
        replace: ''
      with_items:
      - "{{ pwquality_directory_files.files | default([]) | list }}"
      loop_control:
        label: "{{ item.path | default() }}"
      when: not audit_only and pwquality_directory.stat.exists and not password_number_check.remediation_status

    # 4.4.3.2.1 Ensure password number of changed characters is configured | Remediation
    - name: 4.4.3.2.1 Ensure password number of changed characters is configured | Remediation
      replace:
        path: /etc/security/pwquality.conf
        regexp: '^(#difok|difok)[\s]{0,}=.+'
        replace: ''
      when: not audit_only and not password_number_check.remediation_status

    # 4.4.3.2.1 Ensure password number of changed characters is configured | Remediation
    - name: 4.4.3.2.1 Ensure password number of changed characters is configured | Remediation
      lineinfile:
        dest: /etc/security/pwquality.conf
        regexp: '^difok[\s]{1,}=[\s]{1,}2'
        line: "difok = 2"
      when: not audit_only and not password_number_check.remediation_status

    # 4.4.3.2.1 Ensure password number of changed characters is configured | Remediation
    - name: 4.4.3.2.1 Ensure password number of changed characters is configured | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              for pam_file in system-auth password-auth; do
                  authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$pam_file"
                  sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+difok\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
              done
              authselect apply-changes
          fi
      when: not audit_only and not password_number_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.2.2 Ensure password length is configured
  #
  # minlen: Minimum acceptable size for the new password (plus one if credits are not
  # disabled which is the default). Cannot be set to lower value than 6.
  - name: "4.4.3.2.2 Ensure password length is configured"
    block:
    # 4.4.3.2.2 Ensure password length is configured | Audit
    - name: 4.4.3.2.2 Ensure password length is configured | Audit
      shell:
        cmd: |
          minlen=$(awk -F '=' '{print $2}' <<< $(grep -Pi -- '^\h*minlen\h*=\h*(1[4-9]|[2-9][0-9]|[1-9][0-9]{2,})\b' /etc/security/pwquality.conf  || echo "minlen = 0"))
          [[ "$minlen" -gt 13 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_length_status_check

    # 4.4.3.2.2 Ensure password length is configured | Audit
    - name: 4.4.3.2.2 Ensure password length is configured | Audit
      shell:
        cmd: |
          if [ -f /etc/pam.d/system-auth ]; then
              grep -Psi -- '^\h*password\h+(requisite|required|sufficient)\h+pam_pwquality\.so\h+([^#\n\r]+\h+)?minlen\h*=\h*([0-9]|1[0-3])\b' /etc/pam.d/system-auth && \
                  echo 'not_configured' || echo 'configured'
          else
              echo 'not_configured'
          fi
      changed_when: false
      register: system_auth_password_length_status_check

    # Extract audit result
    - set_fact:
        password_length_check:
          name: 4.4.3.2.2 Ensure password length is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (password_length_status_check.stdout == 'configured' and system_auth_password_length_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_length_check] }}"
      changed_when: false

    # 4.4.3.2.2 Ensure password length is configured | Remediation
    - name: 4.4.3.2.2 Ensure password length is configured | Remediation
      replace:
        path: "{{ item.path }}"
        regexp: '^(#minlen|minlen)[\s]{0,}=.*'
        replace: ''
      with_items:
      - "{{ pwquality_directory_files.files | default([]) | list }}"
      loop_control:
        label: "{{ item.path | default() }}"
      when: not audit_only and pwquality_directory.stat.exists and not password_length_check.remediation_status

    # 4.4.3.2.2 Ensure password length is configured | Remediation
    - name: 4.4.3.2.2 Ensure password length is configured | Remediation
      replace:
        path: /etc/security/pwquality.conf
        regexp: '^(#minlen|minlen)[\s]{0,}=.*'
        replace: ''
      when: not audit_only and not password_length_check.remediation_status

    # 4.4.3.2.2 Ensure password length is configured | Remediation
    - name: 4.4.3.2.2 Ensure password length is configured | Remediation
      lineinfile:
        dest: /etc/security/pwquality.conf
        regexp: '^minlen[\s]{1,}=[\s]{1,}14'
        line: "minlen = 14"
      when: not audit_only and not password_length_check.remediation_status

    # 4.4.3.2.2 Ensure password length is configured | Remediation
    - name: 4.4.3.2.2 Ensure password length is configured | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              for pam_file in system-auth password-auth; do
                  authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$pam_file"
                  sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+minlen\s*=\s*[0-9]+)(.*$)/\1\4/' "$authselect_file"
              done
              authselect apply-changes
          fi
      when: not audit_only and not password_length_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.2.3 Ensure password complexity is configured
  #
  # Password complexity can be set through:
  #
  # - minclass: The minimum number of classes of characters required in a new
  #             password. (digits, uppercase, lowercase, others). e.g. minclass = 4 requires
  #             digits, uppercase, lower case, and special characters.
  #
  # - dcredit:  The maximum credit for having digits in the new password. If less than
  #             0 it is the minimum number of digits in the new password. e.g. dcredit = -1
  #
  # - ucredit:  The maximum credit for having uppercase characters in the new
  #             password. If less than 0 it is the minimum number of uppercase characters in the
  #             new password. e.g. ucredit = -1 requires at least one uppercase character
  #
  # - ucredit:  The maximum credit for having uppercase characters in the new
  #             password. If less than 0 it is the minimum number of uppercase characters in the
  #             new password. e.g. ucredit = -1 requires at least one uppercase character
  #
  # - ocredit:  The maximum credit for having other characters in the new password.
  #             If less than 0 it is the minimum number of other characters in the new password.
  #             e.g. ocredit = -1 requires at least one special character
  #
  # - lcredit:  The maximum credit for having lowercase characters in the new
  #             password. If less than 0 it is the minimum number of lowercase characters in the
  #             new password. e.g. lcredit = -1 requires at least one lowercase character
  - name: "4.4.3.2.3 Ensure password complexity is configured"
    block:
    # 4.4.3.2.3 Ensure password complexity is configured | Audit
    - name: 4.4.3.2.3 Ensure password complexity is configured | Audit
      shell:
        cmd: |
          minclass=$(awk -F '=' '{print $2}' <<< $(grep -Pi -- '^\h*(minclass)\b' /etc/security/pwquality.conf  || echo "minclass = 0"))
          [[ "$minclass" -gt 3 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_complexity_status_check

    # 4.4.3.2.3 Ensure password complexity is configured | Audit
    - name: 4.4.3.2.3 Ensure password complexity is configured | Audit
      shell:
        cmd: |
          if [ -f /etc/pam.d/system-auth ]; then
              grep -Psi -- '^\h*password\h+(requisite|required|sufficient)\h+pam_pwquality\.so\h+([^#\n\r]+\h+)?(minclass=[0-3]|[dulo]credit=[^-]\d*)\b' /etc/pam.d/system-auth && \
                  echo 'not_configured' || echo 'configured'
          else
              echo 'not_configured'
          fi
      changed_when: false
      register: system_auth_password_complexity_status_check

    # Extract audit result
    - set_fact:
        password_complexity_check:
          name: 4.4.3.2.3 Ensure password complexity is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (password_complexity_status_check.stdout == 'configured' and system_auth_password_complexity_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_complexity_check] }}"
      changed_when: false

    # 4.4.3.2.3 Ensure password complexity is configured | Remediation
    - name: 4.4.3.2.3 Ensure password complexity is configured | Remediation
      replace:
        path: "{{ item.path }}"
        regexp: '^[#]{0,}(minclass|minclass|[dulo]credit)[\s]{0,}=.*'
        replace: ''
      with_items:
      - "{{ pwquality_directory_files.files | default([]) | list }}"
      loop_control:
        label: "{{ item.path | default() }}"
      when: not audit_only and pwquality_directory.stat.exists and not password_complexity_check.remediation_status

    # 4.4.3.2.3 Ensure password complexity is configured | Remediation
    - name: 4.4.3.2.3 Ensure password complexity is configured | Remediation
      replace:
        path: /etc/security/pwquality.conf
        regexp: '^[#]{0,}(minclass|minclass|[dulo]credit)[\s]{0,}=.*'
        replace: ''
      when: not audit_only and not password_complexity_check.remediation_status

    # 4.4.3.2.3 Ensure password complexity is configured | Remediation
    - name: 4.4.3.2.3 Ensure password complexity is configured | Remediation
      lineinfile:
        dest: /etc/security/pwquality.conf
        regexp: '^minclass[\s]{1,}=[\s]{1,}4'
        line: "minclass = 4"
      when: not audit_only and not password_complexity_check.remediation_status

    # 4.4.3.2.3 Ensure password complexity is configured | Remediation
    - name: 4.4.3.2.3 Ensure password complexity is configured | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              for pam_file in system-auth password-auth; do
                  authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$pam_file"
                  sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+minclass\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
                  sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+dcredit\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
                  sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+ucredit\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
                  sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+lcredit\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
                  sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+ocredit\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
              done
              authselect apply-changes
          fi
      when: not audit_only and not password_complexity_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.2.4 Ensure password same consecutive characters is configured
  #
  # The pwquality maxrepeat option sets the maximum number of allowed same
  # consecutive characters in a new password.
  - name: "4.4.3.2.4 Ensure password same consecutive characters is configured"
    block:
    # 4.4.3.2.4 Ensure password same consecutive characters is configured | Audit
    - name: 4.4.3.2.4 Ensure password same consecutive characters is configured | Audit
      shell:
        cmd: |
          maxrepeat=$(awk -F '=' '{print $2}' <<< $(grep -Pi -- '^\h*maxrepeat\h*=\h*[1-3]\b' /etc/security/pwquality.conf  || echo "maxrepeat = 4"))
          [[ "$maxrepeat" -lt 4 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_maxrepeat_status_check

    # 4.4.3.2.4 Ensure password same consecutive characters is configured | Audit
    - name: 4.4.3.2.4 Ensure password same consecutive characters is configured | Audit
      shell:
        cmd: |
          if [ -f /etc/pam.d/system-auth ]; then
              grep -Psi -- '^\h*password\h+(requisite|required|sufficient)\h+pam_pwquality\.so\h+([^#\n\r]+\h+)?maxrepeat\h*=\h*(0|[4-9]|[1-9][0-9]+)\b' /etc/pam.d/system-auth && \
                  echo 'not_configured' || echo 'configured'
          else
              echo 'not_configured'
          fi
      changed_when: false
      register: system_auth_password_maxrepeat_status_check

    # Extract audit result
    - set_fact:
        password_maxrepeat_check:
          name: 4.4.3.2.4 Ensure password same consecutive characters is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (password_maxrepeat_status_check.stdout == 'configured' and system_auth_password_maxrepeat_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_maxrepeat_check] }}"
      changed_when: false

    # 4.4.3.2.4 Ensure password same consecutive characters is configured | Remediation
    - name: 4.4.3.2.4 Ensure password same consecutive characters is configured | Remediation
      replace:
        path: "{{ item.path }}"
        regexp: '^[#]{0,}(maxrepeat)[\s]{0,}=.*'
        replace: ''
      with_items:
      - "{{ pwquality_directory_files.files | default([]) | list }}"
      loop_control:
        label: "{{ item.path | default() }}"
      when: not audit_only and pwquality_directory.stat.exists and not password_maxrepeat_check.remediation_status

    # 4.4.3.2.4 Ensure password same consecutive characters is configured | Remediation
    - name: 4.4.3.2.4 Ensure password same consecutive characters is configured | Remediation
      replace:
        path: /etc/security/pwquality.conf
        regexp: '^[#]{0,}(maxrepeat)[\s]{0,}=.*'
        replace: ''
      when: not audit_only and not password_maxrepeat_check.remediation_status

    # 4.4.3.2.4 Ensure password same consecutive characters is configured | Remediation
    - name: 4.4.3.2.4 Ensure password same consecutive characters is configured | Remediation
      lineinfile:
        dest: /etc/security/pwquality.conf
        regexp: '^maxrepeat[\s]{1,}=[\s]{1,}3'
        line: "maxrepeat = 3"
      when: not audit_only and not password_maxrepeat_check.remediation_status

    # 4.4.3.2.4 Ensure password same consecutive characters is configured | Remediation
    - name: 4.4.3.2.4 Ensure password same consecutive characters is configured | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              for pam_file in system-auth password-auth; do
                  authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$pam_file"
                  sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+maxrepeat\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
              done
              authselect apply-changes
          fi
      when: not audit_only and not password_maxrepeat_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.2.5 Ensure password maximum sequential characters is configured
  #
  # The pwquality maxsequence option sets the maximum length of monotonic character
  # sequences in the new password. Examples of such sequence are 12345 or fedcb . The
  # check is disabled if the value is 0 .
  #
  # Note: Most such passwords will not pass the simplicity check unless the sequence is
  # only a minor part of the password.
  - name: "4.4.3.2.5 Ensure password maximum sequential characters is configured"
    block:
    # 4.4.3.2.5 Ensure password maximum sequential characters is configured | Audit
    - name: 4.4.3.2.5 Ensure password maximum sequential characters is configured | Audit
      shell:
        cmd: |
          maxsequence=$(awk -F '=' '{print $2}' <<< $(grep -Pi -- '^\h*maxsequence\h*=\h*[1-3]\b' /etc/security/pwquality.conf  || echo "maxsequence = 4"))
          [[ "$maxsequence" -lt 4 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_maxsequence_status_check

    # 4.4.3.2.5 Ensure password maximum sequential characters is configured | Audit
    - name: 4.4.3.2.5 Ensure password maximum sequential characters is configured | Audit
      shell:
        cmd: |
          if [ -f /etc/pam.d/system-auth ]; then
              grep -Psi -- '^\h*password\h+(requisite|required|sufficient)\h+pam_pwquality\.so\h+([^#\n\r]+\h+)?maxsequence\h*=\h*(0|[4-9]|[1-9][0-9]+)\b' /etc/pam.d/system-auth && \
                  echo 'not_configured' || echo 'configured'
          else
              echo 'not_configured'
          fi
      changed_when: false
      register: system_auth_password_maxsequence_status_check

    # Extract audit result
    - set_fact:
        password_maxsequence_check:
          name: 4.4.3.2.5 Ensure password maximum sequential characters is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (password_maxsequence_status_check.stdout == 'configured' and system_auth_password_maxsequence_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_maxsequence_check] }}"
      changed_when: false

    # 4.4.3.2.5 Ensure password maximum sequential characters is configured | Remediation
    - name: 4.4.3.2.5 Ensure password maximum sequential characters is configured | Remediation
      replace:
        path: "{{ item.path }}"
        regexp: '^[#]{0,}(maxsequence)[\s]{0,}=.*'
        replace: ''
      with_items:
      - "{{ pwquality_directory_files.files | default([]) | list }}"
      loop_control:
        label: "{{ item.path | default() }}"
      when: not audit_only and pwquality_directory.stat.exists and not password_maxsequence_check.remediation_status

    # 4.4.3.2.5 Ensure password maximum sequential characters is configured | Remediation
    - name: 4.4.3.2.5 Ensure password maximum sequential characters is configured | Remediation
      replace:
        path: /etc/security/pwquality.conf
        regexp: '^[#]{0,}(maxsequence)[\s]{0,}=.*'
        replace: ''
      when: not audit_only and not password_maxsequence_check.remediation_status

    # 4.4.3.2.5 Ensure password maximum sequential characters is configured | Remediation
    - name: 4.4.3.2.5 Ensure password maximum sequential characters is configured | Remediation
      lineinfile:
        dest: /etc/security/pwquality.conf
        regexp: '^maxsequence[\s]{1,}=[\s]{1,}3'
        line: "maxsequence = 3"
      when: not audit_only and not password_maxsequence_check.remediation_status

    # 4.4.3.2.5 Ensure password maximum sequential characters is configured | Remediation
    - name: 4.4.3.2.5 Ensure password maximum sequential characters is configured | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              for pam_file in system-auth password-auth; do
                  authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$pam_file"
                  sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+maxsequence\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
              done
              authselect apply-changes
          fi
      when: not audit_only and not password_maxsequence_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.2.6 Ensure password dictionary check is enabled
  #
  # The pwquality dictcheck option sets whether to check for the words from the cracklib
  # dictionary.
  - name: "4.4.3.2.6 Ensure password dictionary check is enabled"
    block:
    # 4.4.3.2.6 Ensure password dictionary check is enabled | Audit
    - name: 4.4.3.2.6 Ensure password dictionary check is enabled | Audit
      shell:
        cmd: |
          dictcheck=$(awk -F '=' '{print $2}' <<< $(grep -Pi -- '^\h*dictcheck\h*=\h*1\b' /etc/security/pwquality.conf  || echo "dictcheck = 0"))
          [[ "$dictcheck" -eq 1 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_dictcheck_status_check

    # 4.4.3.2.6 Ensure password dictionary check is enabled | Audit
    - name: 4.4.3.2.6 Ensure password dictionary check is enabled | Audit
      shell:
        cmd: |
          if [ -f /etc/pam.d/system-auth ]; then
              grep -Psi -- '^\h*password\h+(requisite|required|sufficient)\h+pam_pwquality\.so\h+([^#\n\r]+\h+)?dictcheck\h*=\h*0\b' /etc/pam.d/system-auth && \
                  echo 'not_configured' || echo 'configured'
          else
              echo 'not_configured'
          fi
      changed_when: false
      register: system_auth_password_dictcheck_status_check

    # Extract audit result
    - set_fact:
        password_dictcheck_check:
          name: 4.4.3.2.6 Ensure password dictionary check is enabled
          scored: true
          automated: true
          remediation_status: "{{ true if (password_dictcheck_status_check.stdout == 'configured' and system_auth_password_dictcheck_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_dictcheck_check] }}"
      changed_when: false

    # 4.4.3.2.6 Ensure password dictionary check is enabled | Remediation
    - name: 4.4.3.2.6 Ensure password dictionary check is enabled | Remediation
      replace:
        path: "{{ item.path }}"
        regexp: '^[#]{0,}(dictcheck)[\s]{0,}=.*'
        replace: ''
      with_items:
      - "{{ pwquality_directory_files.files | default([]) | list }}"
      loop_control:
        label: "{{ item.path | default() }}"
      when: not audit_only and pwquality_directory.stat.exists and not password_dictcheck_check.remediation_status

    # 4.4.3.2.6 Ensure password dictionary check is enabled | Remediation
    - name: 4.4.3.2.6 Ensure password dictionary check is enabled | Remediation
      replace:
        path: /etc/security/pwquality.conf
        regexp: '^[#]{0,}(dictcheck)[\s]{0,}=.*'
        replace: ''
      when: not audit_only and not password_dictcheck_check.remediation_status

    # 4.4.3.2.6 Ensure password dictionary check is enabled | Remediation
    - name: 4.4.3.2.6 Ensure password dictionary check is enabled | Remediation
      lineinfile:
        dest: /etc/security/pwquality.conf
        regexp: '^dictcheck[\s]{1,}=[\s]{1,}1'
        line: "dictcheck = 1"
      when: not audit_only and not password_dictcheck_check.remediation_status

    # 4.4.3.2.6 Ensure password dictionary check is enabled | Remediation
    - name: 4.4.3.2.6 Ensure password dictionary check is enabled | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              for pam_file in system-auth password-auth; do
                  authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$pam_file"
                  sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwquality\.so.*)(\s+dictcheck\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
              done
              authselect apply-changes
          fi
      when: not audit_only and not password_dictcheck_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.2.7 Ensure password quality is enforced for the root user
  #
  # If the pwquality enforce_for_root option is enabled, the module will return error on
  # failed check even if the user changing the password is root.
  # This option is off by default which means that just the message about the failed check is
  # printed but root can change the password anyway.
  #
  # Note: The root is not asked for an old password so the checks that compare the old and
  # new password are not performed.
  - name: "4.4.3.2.7 Ensure password quality is enforced for the root user"
    block:
    # 4.4.3.2.7 Ensure password quality is enforced for the root user | Audit
    - name: 4.4.3.2.7 Ensure password quality is enforced for the root user | Audit
      shell:
        cmd: |
          grep -Psiq -- '^\h*enforce_for_root\b' /etc/security/pwquality.conf && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_enforce_for_root_status_check

    # Extract audit result
    - set_fact:
        password_enforce_for_root_check:
          name: 4.4.3.2.7 Ensure password quality is enforced for the root user
          scored: true
          automated: true
          remediation_status: "{{ true if password_enforce_for_root_status_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_enforce_for_root_check] }}"
      changed_when: false

    # 4.4.3.2.7 Ensure password quality is enforced for the root user | Remediation
    - name: 4.4.3.2.7 Ensure password quality is enforced for the root user | Remediation
      replace:
        path: "{{ item.path }}"
        regexp: '^[#]{0,}(enforce_for_root).*'
        replace: ''
      with_items:
      - "{{ pwquality_directory_files.files | default([]) | list }}"
      loop_control:
        label: "{{ item.path | default() }}"
      when: not audit_only and pwquality_directory.stat.exists and not password_enforce_for_root_check.remediation_status

    # 4.4.3.2.7 Ensure password quality is enforced for the root user | Remediation
    - name: 4.4.3.2.7 Ensure password quality is enforced for the root user | Remediation
      replace:
        path: /etc/security/pwquality.conf
        regexp: '^[#]{0,}(enforce_for_root).*'
        replace: ''
      when: not audit_only and not password_enforce_for_root_check.remediation_status

    # 4.4.3.2.7 Ensure password quality is enforced for the root user | Remediation
    - name: 4.4.3.2.7 Ensure password quality is enforced for the root user | Remediation
      lineinfile:
        dest: /etc/security/pwquality.conf
        regexp: 'enforce_for_root'
        line: "enforce_for_root"
      when: not audit_only and not password_enforce_for_root_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"