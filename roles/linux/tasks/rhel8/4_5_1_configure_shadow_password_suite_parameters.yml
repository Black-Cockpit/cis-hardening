# 4.5.1 Configure shadow password suite parameters
- name: 4.5.1 Configure shadow password suite parameters
  block:
  # 4.5.1.1 Ensure strong password hashing algorithm is configured
  #
  # A cryptographic hash function converts an arbitrary-length input into a fixed length
  # output. Password hashing performs a one-way transformation of a password, turning
  # the password into another string, called the hashed password.
  - name: "4.5.1.1 Ensure strong password hashing algorithm is configured"
    block:
    # 4.5.1.1 Ensure strong password hashing algorithm is configured | Audit
    - name: 4.5.1.1 Ensure strong password hashing algorithm is configured | Audit
      shell:
        cmd: |
          grep -Piq -- '^\h*crypt_style\h*=\h*(sha512|yescrypt)\b' /etc/libuser.conf && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_crypt_style_status_check

    # 4.5.1.1 Ensure strong password hashing algorithm is configured | Audit
    - name: 4.5.1.1 Ensure strong password hashing algorithm is configured | Audit
      shell:
        cmd: |
          grep -Pi -- '^\h*ENCRYPT_METHOD\h+(SHA512|yescrypt)\b' /etc/login.defs && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_encrypt_method_status_check

    # Extract audit result
    - set_fact:
        password_hashing_check:
          name: 4.5.1.1 Ensure strong password hashing algorithm is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (password_crypt_style_status_check.stdout == 'configured' and password_crypt_style_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_hashing_check] }}"
      changed_when: false

    # 4.5.1.1 Ensure strong password hashing algorithm is configured | Remediation
    - name: 4.5.1.1 Ensure strong password hashing algorithm is configured | Remediation
      replace:
        path: "{{ item.path }}"
        regexp: "{{ item.regexp }}"
        replace: ''
      loop:
      - path: "/etc/libuser.conf"
        regexp: '^[#]{0,}(crypt_style)[\s]{0,}=.*'
      - path: "/etc/login.defs"
        regexp: '^[#]{0,}(ENCRYPT_METHOD)[\s]{0,}.*'
      when: not audit_only and not password_hashing_check.remediation_status

    # 4.5.1.1 Ensure strong password hashing algorithm is configured | Remediation
    - name: 4.5.1.1 Ensure strong password hashing algorithm is configured | Remediation
      lineinfile:
        dest: "{{ item.path }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
      - path: "/etc/libuser.conf"
        regexp: '^(crypt_style)[\s]{0,}=[\s]{0,}sha512'
        line: 'crypt_style = sha512'
      - path: "/etc/login.defs"
        regexp: '^(ENCRYPT_METHOD)[\s]{0,}SHA512'
        line: 'ENCRYPT_METHOD SHA512'
      when: not audit_only and not password_hashing_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.5.1.2 Ensure password expiration is 365 days or less
  #
  # The PASS_MAX_DAYS parameter in /etc/login.defs allows an administrator to force
  # passwords to expire once they reach a defined age. It is recommended that the
  # PASS_MAX_DAYS parameter be set to less than or equal to 365 days.
  - name: "4.5.1.2 Ensure password expiration is 365 days or less"
    block:
    # 4.5.1.2 Ensure password expiration is 365 days or less | Audit
    - name: 4.5.1.2 Ensure password expiration is 365 days or less | Audit
      shell:
        cmd: |
          password_expiry=$(grep -E '^[\s]{0,}PASS_MAX_DAYS' /etc/login.defs | awk '{print $2}' || echo 99999)
          [[ "$password_expiry" -lt 366 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_expiry_status_check

    # 4.5.1.2 Ensure password expiration is 365 days or less | Audit
    - name: 4.5.1.2 Ensure password expiration is 365 days or less | Audit
      shell:
        cmd: |
          audit='configured'

          while read -r user; do
              if [[ $(awk -F ':' '{print $2}'<<<"$user" || echo 99999) -gt 366 ]]; then
                  audit='not_configured'
                  break
              fi
          done <<<"$(grep -E '^[^:]+:[^!*]' /etc/shadow | cut -d: -f1,5)"

          echo "$audit"
      changed_when: false
      register: users_password_expiry_status_check
      
    # Extract audit result
    - set_fact:
        password_expiry_check:
          name: 4.5.1.2 Ensure password expiration is 365 days or less
          scored: true
          automated: true
          remediation_status: "{{ true if (password_expiry_status_check.stdout == 'configured' and users_password_expiry_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_expiry_check] }}"
      changed_when: false

    # 4.5.1.2 Ensure password expiration is 365 days or less | Remediation
    - name: 4.5.1.2 Ensure password expiration is 365 days or less | Remediation
      replace:
        path: "/etc/login.defs"
        regexp: '^[#]{0,}(PASS_MAX_DAYS)[\s]{0,}.*'
        replace: ''
      when: not audit_only and not password_expiry_check.remediation_status

    # 4.5.1.2 Ensure password expiration is 365 days or less | Remediation
    - name: 4.5.1.2 Ensure password expiration is 365 days or less | Remediation
      lineinfile:
        dest: "/etc/login.defs"
        regexp: '^(PASS_MAX_DAYS)[\s]{0,}365'
        line: "PASS_MAX_DAYS 365"
      when: not audit_only and not password_expiry_check.remediation_status

    # 4.5.1.2 Ensure password expiration is 365 days or less | Remediation
    - name: 4.5.1.2 Ensure password expiration is 365 days or less | Remediation
      shell:
        cmd: |
          while read -r user; do
              user_name=$(awk -F ':' '{print $1}'<<<"$user" || echo '')
              if [[ "$user_name" != '' ]]; then
                  chage --maxdays 365 "$user_name"
              fi
          done <<<"$(grep -E '^[^:]+:[^!*]' /etc/shadow | cut -d: -f1,5)"
      when: not audit_only and not password_expiry_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.5.1.3 Ensure password expiration warning days is 7 or more
  #
  # The PASS_WARN_AGE parameter in /etc/login.defs allows an administrator to notify
  # users that their password will expire in a defined number of days. It is recommended
  # that the PASS_WARN_AGE parameter be set to 7 or more days.
  - name: "4.5.1.3 Ensure password expiration warning days is 7 or more"
    block:
    # 4.5.1.3 Ensure password expiration warning days is 7 or more | Audit
    - name: 4.5.1.3 Ensure password expiration warning days is 7 or more | Audit
      shell:
        cmd: |
          password_expiry_warning=$(grep -E '^[\s]{0,}PASS_WARN_AGE' /etc/login.defs | awk '{print $2}' || echo '0')
          [[ "$password_expiry_warning" -gt 6 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_expiry_warning_status_check

    # 4.5.1.3 Ensure password expiration warning days is 7 or more | Audit
    - name: 4.5.1.3 Ensure password expiration warning days is 7 or more | Audit
      shell:
        cmd: |
          audit='configured'

          while read -r user; do
              if [[ $(awk -F ':' '{print $2}' <<<"$user" || echo '0') -lt 7 ]]; then
                  audit='not_configured'
                  break
              fi
          done <<<"$(awk -F: '/^[^:\n\r]+:[^!\*xX\n\r]/ {print $1 ":" $6}' /etc/shadow)"
          
          echo "$audit"
      changed_when: false
      register: users_password_expiry_warning_status_check
      
    # Extract audit result
    - set_fact:
        password_expiry_warning_check:
          name: 4.5.1.3 Ensure password expiration warning days is 7 or more
          scored: true
          automated: true
          remediation_status: "{{ true if (password_expiry_warning_status_check.stdout == 'configured' and users_password_expiry_warning_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_expiry_warning_check] }}"
      changed_when: false

    # 4.5.1.3 Ensure password expiration warning days is 7 or more | Remediation
    - name: 4.5.1.3 Ensure password expiration warning days is 7 or more | Remediation
      replace:
        path: "/etc/login.defs"
        regexp: '^[#]{0,}(PASS_WARN_AGE)[\s]{0,}.*'
        replace: ''
      when: not audit_only and not password_expiry_warning_check.remediation_status

    # 4.5.1.3 Ensure password expiration warning days is 7 or more | Remediation
    - name: 4.5.1.3 Ensure password expiration warning days is 7 or more | Remediation
      lineinfile:
        dest: "/etc/login.defs"
        regexp: '^(PASS_WARN_AGE)[\s]{0,}30'
        line: "PASS_WARN_AGE 365"
      when: not audit_only and not password_expiry_warning_check.remediation_status

    # 4.5.1.3 Ensure password expiration warning days is 7 or more | Remediation
    - name: 4.5.1.3 Ensure password expiration warning days is 7 or more | Remediation
      shell:
        cmd: |
          while read -r user; do
              user_name=$(awk -F ':' '{print $1}' <<<"$user" || echo '')
              if [[ "$user_name" != '' ]]; then
                  chage --warndays 30 "$user_name"
              fi
          done <<<"$(awk -F: '/^[^:\n\r]+:[^!\*xX\n\r]/ {print $1 ":" $6}' /etc/shadow)"
      when: not audit_only and not password_expiry_warning_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.5.1.4 Ensure inactive password lock is 30 days or less
  #
  # User accounts that have been inactive for over a given period of time can be
  # automatically disabled. It is recommended that accounts that are inactive for 30 days
  # after password expiration be disabled.
  - name: "4.5.1.4 Ensure inactive password lock is 30 days or less"
    block:
    # 4.5.1.4 Ensure inactive password lock is 30 days or less | Audit
    - name: 4.5.1.4 Ensure inactive password lock is 30 days or less | Audit
      shell:
        cmd: |
          [[ $(useradd -D | grep INACTIVE | awk -F '=' '{print $2}') -gt 29 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: inactive_password_lock_status_check

    # 4.5.1.4 Ensure inactive password lock is 30 days or less | Audit
    - name: 4.5.1.4 Ensure inactive password lock is 30 days or less | Audit
      shell:
        cmd: |
          not_configured_users_count=$(awk -F: '/^[^#:]+:[^!\*:]*:[^:]*:[^:]*:[^:]*:[^:]*:(\s*|-1|3[1-9]|[4-9][0-9]|[1-9][0-9][0-9]+):[^:]*:[^:]*\s*$/ {print $1":"$7}' /etc/shadow | wc -l)
          [[ "$not_configured_users_count" -eq 0 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: users_inactive_password_lock_status_check
      
    # Extract audit result
    - set_fact:
        inactive_password_lock_check:
          name: 4.5.1.4 Ensure inactive password lock is 30 days or less
          scored: true
          automated: true
          remediation_status: "{{ true if (inactive_password_lock_status_check.stdout == 'configured' and users_inactive_password_lock_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [inactive_password_lock_check] }}"
      changed_when: false

    # 4.5.1.4 Ensure inactive password lock is 30 days or less | Remediation
    - name: 4.5.1.4 Ensure inactive password lock is 30 days or less | Remediation
      shell:
        cmd: useradd -D -f 30
      when: not audit_only and not inactive_password_lock_check.remediation_status
    
    # 4.5.1.4 Ensure inactive password lock is 30 days or less | Remediation
    - name: 4.5.1.4 Ensure inactive password lock is 30 days or less | Remediation
      shell:
        cmd: |
          while read -r user; do
              user_name=$(awk -F ':' '{print $1}' <<<"$user" || echo '')
              if [[ "$user_name" != '' ]]; then
                  chage --inactive 30 "$user_name"
              fi
          done <<<$(awk -F: '/^[^#:]+:[^!\*:]*:[^:]*:[^:]*:[^:]*:[^:]*:(\s*|-1|3[1-9]|[4-9][0-9]|[1-9][0-9][0-9]+):[^:]*:[^:]*\s*$/ {print $1":"$7}' /etc/shadow)
      when: not audit_only and not inactive_password_lock_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"
# 4.5.1.5 Ensure all users last password change date is in the past
#
# All users should have a password change date in the past.
- name: 4.5.1.5 Ensure all users last password change date is in the past | Audit
  shell: |
    for user_name in $(awk -F: '/^[^:\n\r]+:[^!*xX\n\r]/{print $1}' /etc/shadow); do
        last_password_change=$(date -d "$(chage --list $user_name | grep '^Last password change' | cut -d: -f2 | grep -v 'never$')" +%s 2>/dev/null)
        if [[ -n "$last_password_change" && "$last_password_change" -gt "$(date +%s)" ]]; then
            echo "$user_name"
        fi
    done
  args:
    executable: /bin/bash
  changed_when: false
  register: last_password_change_status

- name: Set default if no users with invalid last password change date
  set_fact:
    invalid_password_date_users_list: "{{ last_password_change_status.stdout_lines | default([]) }}"
  when: last_password_change_status.stdout_lines is defined

- name: Ensure invalid_password_date_users_list is defined
  set_fact:
    invalid_password_date_users_list: "{{ invalid_password_date_users_list | default([]) }}"

# Extract audit result
- name: Extract audit result
  set_fact:
    invalid_password_date_check:
      name: 4.5.1.5 Ensure all users last password change date is in the past
      scored: true
      automated: true
      remediation_status: "{{ 'true' if invalid_password_date_users_list == [] else 'false' }}"
  changed_when: false

# Adding remediation description
- name: Add remediation description
  set_fact:
    remediation_description:
      remediation: "Consider locking, expiring, or resetting the password for the users below:\n{% for item in invalid_password_date_users_list %}- {{ item + '\n' }}{% endfor %}"
  changed_when: false
  when: not invalid_password_date_check.remediation_status

# Append remediation
- name: Append remediation
  set_fact:
    invalid_password_date_check: "{{ invalid_password_date_check | combine(remediation_description) }}"
  changed_when: false
  when: not invalid_password_date_check.remediation_status

# Appending audit result
- name: Append audit result
  set_fact:
    audit_result: "{{ (audit_result | default([])) + [invalid_password_date_check] }}"
  changed_when: false
  tags:
    - "server_level_1"
    - "workstation_level_1"
  when: "'server_level_1' in levels or 'workstation_level_1' in levels"
