- name: "Pre Audit | Stat /etc/security/pwhistory.conf file"
  block:
  # Stat Stat /etc/security/pwhistory.conf file
  - name: "Pre Audit | Stat /etc/security/pwhistory.conf file"
    stat:
      path: /etc/security/pwhistory.conf
    changed_when: false
    register: pwhistory_file

# 4.4.3.3 Configure pam_pwhistory module
- name: 4.4.3.3 Configure pam_pwhistory module
  block:
  # 4.4.3.3.1 Ensure password history remember is configured
  #
  # The /etc/security/opasswd file stores the users' old passwords and can be checked to
  # ensure that users are not recycling recent passwords.
  #
  # remember=<N>: <N> is the number of old passwords to remember
  - name: "4.4.3.3.1 Ensure password history remember is configured"
    block:
    # 4.4.3.3.1 Ensure password history remember is configured | Audit
    - name: 4.4.3.3.1 Ensure password history remember is configured | Audit
      shell:
        cmd: |
          remember=$(awk -F '=' '{print $2}' <<< $(grep -Pi -- '^\h*remember\h*=\h*(2[4-9]|[3-9][0-9]|[1-9][0-9]{2,})\b' /etc/security/pwhistory.conf  || echo "remember = 0"))
          [[ "$remember" -gt 23 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_remember_status_check

    # 4.4.3.3.1 Ensure password history remember is configured | Audit
    - name: 4.4.3.3.1 Ensure password history remember is configured | Audit
      shell:
        cmd: |
          if [ -f /etc/pam.d/system-auth ]; then
              grep -Pi -- '^\h*password\h+(requisite|required|sufficient)\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?remember=(2[0-3]|1[0-9]|[0-9])\b' /etc/pam.d/system-auth && \
                  echo 'not_configured' || echo 'configured'
          else
              echo 'not_configured'
          fi
      changed_when: false
      register: system_auth_password_remember_status_check

    # Extract audit result
    - set_fact:
        password_remember_check:
          name: 4.4.3.3.1 Ensure password history remember is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (password_remember_status_check.stdout == 'configured' and system_auth_password_remember_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_remember_check] }}"
      changed_when: false

    # 4.4.3.3.1 Ensure password history remember is configured | Remediation
    - name: 4.4.3.3.1 Ensure password history remember is configured | Remediation
      copy:
        dest: /etc/security/pwhistory.conf
        content: ''
        mode: "0644"
        owner: root
        group: root
      when: not audit_only and not pwhistory_file.stat.exists and not password_remember_check.remediation_status

    # 4.4.3.3.1 Ensure password history remember is configured | Remediation
    - name: 4.4.3.3.1 Ensure password history remember is configured | Remediation
      replace:
        path: /etc/security/pwhistory.conf
        regexp: '^(#remember|remember)[\s]{0,}=.+'
        replace: ''
      when: not audit_only and pwhistory_file.stat.exists and not password_remember_check.remediation_status

    # 4.4.3.3.1 Ensure password history remember is configured | Remediation
    - name: 4.4.3.3.1 Ensure password history remember is configured | Remediation
      lineinfile:
        dest: /etc/security/pwhistory.conf
        regexp: '^remember[\s]{1,}=[\s]{1,}2'
        line: "remember = 24"
        create: true
      when: not audit_only and not password_remember_check.remediation_status

    # 4.4.3.3.1 Ensure password history remember is configured | Remediation
    - name: 4.4.3.3.1 Ensure password history remember is configured | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              for pam_file in system-auth password-auth; do
                  authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$pam_file"
                  sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwhistory\.so.*)(\s+remember\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
              done
              authselect apply-changes
          fi
      when: not audit_only and not password_remember_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.3.2 Ensure password history is enforced for the root user
  #
  # If the pwhistory enforce_for_root option is enabled, the module will enforce password
  # history for the root user as well
  - name: "4.4.3.3.2 Ensure password history is enforced for the root user"
    block:
    # 4.4.3.3.2 Ensure password history is enforced for the root user | Audit
    - name: 4.4.3.3.2 Ensure password history is enforced for the root user | Audit
      shell:
        cmd: |
          grep -Piq -- '^\h*enforce_for_root\b' /etc/security/pwhistory.conf && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: password_history_enforce_for_root_status_check

    # Extract audit result
    - set_fact:
        password_history_enforce_for_root_check:
          name: 4.4.3.3.2 Ensure password history is enforced for the root user
          scored: true
          automated: true
          remediation_status: "{{ true if password_history_enforce_for_root_status_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_history_enforce_for_root_check] }}"
      changed_when: false

    # 4.4.3.3.2 Ensure password history is enforced for the root user | Remediation
    - name: 4.4.3.3.2 Ensure password history is enforced for the root user | Remediation
      copy:
        dest: /etc/security/pwhistory.conf
        content: ''
        mode: "0644"
        owner: root
        group: root
      when: not audit_only and not pwhistory_file.stat.exists and not password_history_enforce_for_root_check.remediation_status

    # 4.4.3.3.2 Ensure password history is enforced for the root user | Remediation
    - name: 4.4.3.3.2 Ensure password history is enforced for the root user | Remediation
      replace:
        path: /etc/security/pwhistory.conf
        regexp: '^[#]{0,}(enforce_for_root)'
        replace: ''
      when: not audit_only and pwhistory_file.stat.exists and not password_history_enforce_for_root_check.remediation_status

    # 4.4.3.3.2 Ensure password history is enforced for the root user | Remediation
    - name: 4.4.3.3.2 Ensure password history is enforced for the root user | Remediation
      lineinfile:
        dest: /etc/security/pwhistory.conf
        regexp: '^enforce_for_root'
        line: "enforce_for_root"
        create: true
      when: not audit_only and not password_history_enforce_for_root_check.remediation_status

    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.3.3 Ensure pam_pwhistory includes use_authtok
  #
  # use_authtok: When password changing enforce the module to set the new password to
  # the one provided by a previously stacked password module
  - name: "4.4.3.3.3 Ensure pam_pwhistory includes use_authtok"
    block:
    # 4.4.3.3.3 Ensure pam_pwhistory includes use_authtok | Audit
    - name: 4.4.3.3.3 Ensure pam_pwhistory includes use_authtok | Audit
      shell:
        cmd: |
          if  grep -Pq -- '^\h*password\h+([^#\n\r]+)\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?\b' /etc/pam.d/{password,system}-auth ; then
              [ -f /etc/authselect/authselect.conf ] &&
                  grep -Pq -- '^\h*password\h+([^#\n\r]+)\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?use_authtok\b' /etc/pam.d/{password,system}-auth &&
                  echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: password_use_authtok_status_check

    # Extract audit result
    - set_fact:
        password_use_authtok_check:
          name: 4.4.3.3.3 Ensure pam_pwhistory includes use_authtok
          scored: true
          automated: true
          remediation_status: "{{ true if password_use_authtok_status_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [password_use_authtok_check] }}"
      changed_when: false

    # 4.4.3.3.3 Ensure pam_pwhistory includes use_authtok | Remediation
    - name: 4.4.3.3.3 Ensure pam_pwhistory includes use_authtok | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              pam_file="$(head -1 /etc/authselect/authselect.conf)"
              if grep -Pq -- '^custom\/' <<<"$pam_file"; then
                  pam_file_path="/etc/authselect/$pam_file"
              else
                  pam_file_path="/usr/share/authselect/default/$pam_file"
              fi

              if grep -Pq -- '^\h*password\h+(requisite|required|sufficient)\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?use_authtok\b' "$pam_file_path"/{password,system}-auth; then

                  for authselect_file in "$pam_file_path"/password-auth "$pam_file_path"/system-auth; do
                      if ! grep -Pq '^\h*password\h+([^#\n\r]+)\h+pam_pwhistory\.so\h+([^#\n\r]+\h+)?use_authtok\b' "$authselect_file"; then
                          sed -ri 's/(^\s*password\s+(requisite|required|sufficient)\s+pam_pwhistory\.so\s+.*)$/&use_authtok/g' "$authselect_file"
                      fi
                  done
              fi

              authselect apply-changes
          fi
      when: not audit_only and not password_use_authtok_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"