# Check target RHEL platforms 
- name: "Pre Audit | Check OS version and family"
  assert:
    that: (ansible_distribution != 'CentOS' and ansible_os_family == 'RedHat' or ansible_os_family == "Rocky" or ansible_os_family == "AlmaLinux") and ansible_distribution_major_version is version_compare('8', '==')
    fail_msg: "This role can only be run against Supported OSs. {{ ansible_distribution }} {{ ansible_distribution_major_version }} is not supported."
    success_msg: "This role is running against a supported OS {{ ansible_distribution }} {{ ansible_distribution_major_version }}"
  changed_when: false
  tags:
  - always



# Check whether machine is UEFI-based
- name: "Pre Audit | Check whether machine is UEFI-based"
  block:
  # Stat UEFI file system
  - name: "Pre Audit | Check whether machine is UEFI-based"
    stat:
      path: /sys/firmware/efi
    changed_when: false
    register: rhel_boot_type
  # Setting UEFI boot type existance
  - set_fact:
      is_uefi_boot: "{{ true if rhel_boot_type.stat.exists else false }}"
    changed_when: false
  tags:
  - always




# Check if IPv6 is disabled
- name: "Pre Audit | Check if IPv6 is disabled"
  block:
  - name: "Pre Audit | Check if IPv6 is disabled"
    shell:
      cmd: echo $([[ -f /sys/module/ipv6/parameters/disable ]] && cat /sys/module/ipv6/parameters/disable || 0)
    changed_when: false
    register: ipv6_status
  - set_fact:
      is_ipv6_disabled: "{{ true if ((ipv6_status.stdout | int) == 0) else false }}"
    changed_when: false
  tags:
  - always

# List sysconf files:
- name: "Pre Audit | List sysconf files"
  block:
  - name: "Pre Audit | List sysconf files"
    shell:
        cmd: "[[ -f /usr/lib/systemd/systemd-sysctl ]] && /usr/lib/systemd/systemd-sysctl --cat-config | grep -E \"^#\\s\/.*\\.conf\" | awk '{print $2}'"
    changed_when: false
    register: sysctl_conf_files_list
  - set_fact:
      sysctl_conf_files: "{{ sysctl_conf_files_list.stdout_lines | list }}"
    changed_when: false
  tags:
  - always


- name: "Pre Audit | List sudoers files"
  block:
  # Pre Audit | List /etc/sudoers.d files
  - name: Pre Audit | List /etc/sudoers.d files
    find:
      paths:
        - "/etc/sudoers.d"
      file_type: file
      recurse: true
    changed_when: false
    register: sudoersd_files_find_list

  # Pre Audit | List /etc/sudoers files
  - name: Pre Audit | List /etc/sudoers files
    find:
      paths:
        - "/etc/"
      file_type: file
      patterns:
        - "sudoers*"
      recurse: true
    changed_when: false
    register: sudoers_files_find_list

  # Init sudoers files list
  - set_fact:
      sudoers_files: []
    changed_when: false

  # Append sudoers files
  - set_fact:
      sudoers_files: "{{ (sudoers_files | default([])) + [item.path] }}"
    changed_when: false
    loop: "{{ sudoers_files_find_list.files }}"
    loop_control:
      label: "{{ item.path }}"
    when: sudoers_files_find_list.files is defined

  # Append sudoers.d files
  - set_fact:
      sudoers_files: "{{ (sudoers_files | default([])) + [item.path] }}"
    changed_when: false
    loop: "{{ sudoersd_files_find_list.files }}"
    loop_control:
      label: "{{ item.path }}"
    when: sudoersd_files_find_list.files is defined