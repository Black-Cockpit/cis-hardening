# 3.3 Configure Network Kernel Parameters
- name: 3.3 Configure Network Kernel Parameters
  block:
  # 3.3.1 Ensure ip forwarding is disabled
  #
  # The net.ipv4.ip_forward and net.ipv6.conf.all.forwarding flags are used to tell the
  # system whether it can forward packets or not.
  - name: "3.3.1 Ensure ip forwarding is disabled"
    block:
    # Audit net.ipv4.ip_forward status
    - name: 3.3.1 Ensure ip forwarding is disabled | Audit
      block:
      # Check current net.ipv4.ip_forward status
      - name: 3.3.1 Ensure ip forwarding is disabled | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.ip_forward" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv4_forwaring_current_status_conf_check

      # Define remediation status
      - set_fact: 
          ip_forwaring_remediation_status: "{{ true if ipv4_forwaring_current_status_conf_check.stdout == 'configured' else false }}"
        changed_when: false

      # Check net.ipv4.ip_forward is disabled on sysctl.conf file
      - name: 3.3.1 Ensure ip forwarding is disabled | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.ip_forward\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv4_forwaring_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          ip_forwaring_remediation_status: "{{ true if (ip_forwaring_remediation_status and ipv4_forwaring_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ip_forwaring_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.ip_forward configuration
      - name: 3.3.1 Ensure ip forwarding is disabled | Audit
        shell:
          cmd: |
            'item_exists=$(grep -E "^\s{0,}net.ipv4.ip_forward\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.ip_forward\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_forwaring_conf_check
        loop: "{{ sysctl_conf_files }}"

     # Update remediation status
      - set_fact:
          ip_forwaring_remediation_status: "{{ true if (ip_forwaring_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv4_forwaring_conf_check.results | list }}"
        when: ip_forwaring_remediation_status

      # Check if net.ipv4.ip_forward is configured in one of the UFW sysctl configuration files
      - name: 3.3.1 Ensure ip forwarding is disabled | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.ip_forward\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.ip_forward\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          ip_forwaring_remediation_status: "{{ true if (ip_forwaring_remediation_status and ipv4_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ip_forwaring_remediation_status
    
    # Audit net.ipv6.conf.all.forwarding status
    - name: 3.3.1 Ensure ip forwarding is disabled | Audit
      block:
      # Check current net.ipv6.conf.all.forwarding status
      - name: 3.3.1 Ensure ip forwarding is disabled | Audit
        shell:
          cmd: |
            ipv6="$(sysctl "net.ipv6.conf.all.forwarding" | awk -F= '{print $2}')";
            echo $ipv6 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv6_forwaring_current_status_conf_check

      # Update remediation status
      - set_fact: 
          ip_forwaring_remediation_status: "{{ true if (ip_forwaring_remediation_status and ipv6_forwaring_current_status_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ip_forwaring_remediation_status

      # Check net.ipv6.conf.all.forwarding is disabled on sysctl.conf file
      - name: 3.3.1 Ensure ip forwarding is disabled | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv6.conf.all.forwarding\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv6_forwaring_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          ip_forwaring_remediation_status: "{{ true if (ip_forwaring_remediation_status and ipv6_forwaring_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ip_forwaring_remediation_status

      # Check if one of sysctl configuration files has net.ipv6.conf.all.forwarding configuration
      - name: 3.3.1 Ensure ip forwarding is disabled | Audit
        shell:
          cmd: |
           'item_exists=$(grep -E "^\s{0,}net.ipv6.conf.all.forwarding\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.all.forwarding\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_forwaring_conf_check
        loop: "{{ sysctl_conf_files }}"

      # Update remediation status
      - set_fact:
          ip_forwaring_remediation_status: "{{ true if (ip_forwaring_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv6_forwaring_conf_check.results | list }}"
        when: ip_forwaring_remediation_status
      
      # Check if net.ipv6.conf.all.forwarding is configured in one of the UFW sysctl configuration files
      - name: 3.3.1 Ensure ip forwarding is disabled | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv6.conf.all.forwarding\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.all.forwarding\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          ip_forwaring_remediation_status: "{{ true if (ip_forwaring_remediation_status and ipv6_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ip_forwaring_remediation_status

    # Extract audit result
    - set_fact:
        ip_forwaring_check:
          name: 3.3.1 Ensure ip forwarding is disabled
          scored: true
          automated: true
          remediation_status: "{{ true if ip_forwaring_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ip_forwaring_check] }}"
      changed_when: false

    # 3.3.1 Ensure ip forwarding is disabled | Remediation
    - name: "3.3.1 Ensure ip forwarding is disabled | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not ip_forwaring_check.remediation_status 
    
    # 3.3.1 Ensure ip forwarding is disabled | Remediation
    - name: "3.3.1 Ensure ip forwarding is disabled | Remediation"
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.forwarding
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not ip_forwaring_check.remediation_status 
    
    # 3.3.1 Ensure ip forwarding is disabled | Remediation
    - name: "3.3.1 Ensure ip forwarding is disabled | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.route.flush
        value: 1
        sysctl_set: false
        reload: true
      when: not audit_only and not ip_forwaring_check.remediation_status 
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.3.2 Ensure packet redirect sending is disabled
  #
  # ICMP Redirects are used to send routing information to other hosts. As a host itself
  # does not act as a router (in a host only configuration), there is no need to send
  # redirects.
  - name: "3.3.2 Ensure packet redirect sending is disabled"
    block:
    # Audit net.ipv4.conf.all.send_redirects status
    - name: 3.3.2 Ensure packet redirect sending is disabled | Audit
      block:
      # Check current net.ipv4.conf.all.send_redirects status
      - name: 3.3.2 Ensure packet redirect sending is disabled | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.all.send_redirects" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv4_all_icmp_redirect_current_status_conf_check

      # Define remediation status
      - set_fact: 
          icmp_redirect_remediation_status: "{{ true if ipv4_all_icmp_redirect_current_status_conf_check.stdout == 'configured' else false }}"
        changed_when: false

      # Check net.ipv4.conf.all.send_redirects is disabled on sysctl.conf file
      - name: 3.3.2 Ensure packet redirect sending is disabled | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.all.send_redirects\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv4_all_icmp_redirect_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          icmp_redirect_remediation_status: "{{ true if (icmp_redirect_remediation_status and ipv4_all_icmp_redirect_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirect_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.all.send_redirects configuration
      - name: 3.3.2 Ensure packet redirect sending is disabled | Audit
        shell:
          cmd: |
            'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.all.send_redirects\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.send_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_all_icmp_redirect_conf_check
        loop: "{{ sysctl_conf_files }}"

      # Update remediation status
      - set_fact:
          icmp_redirect_remediation_status: "{{ true if (icmp_redirect_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv4_all_icmp_redirect_conf_check.results | list }}"
        when: icmp_redirect_remediation_status

      # Check if net.ipv4.conf.all.send_redirects is configured in one of the UFW sysctl configuration files
      - name: 3.3.2 Ensure packet redirect sending is disabled | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.all.send_redirects\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.send_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_all_icmp_redirect_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          icmp_redirect_remediation_status: "{{ true if (icmp_redirect_remediation_status and ipv4_all_icmp_redirect_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirect_remediation_status
    
    # Audit net.ipv4.conf.default.send_redirects status
    - name: 3.3.2 Ensure packet redirect sending is disabled | Audit
      block:
      # Check current net.ipv4.conf.default.send_redirects status
      - name: 3.3.2 Ensure packet redirect sending is disabled | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.default.send_redirects" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv4_default_icmp_redirect_current_status_conf_check

      # Update remediation status
      - set_fact: 
          icmp_redirect_remediation_status: "{{ true if (icmp_redirect_remediation_status and ipv4_default_icmp_redirect_current_status_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirect_remediation_status

      # Check net.ipv4.conf.default.send_redirects is disabled on sysctl.conf file
      - name: 3.3.2 Ensure packet redirect sending is disabled | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.default.send_redirects\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv4_default_icmp_redirect_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          icmp_redirect_remediation_status: "{{ true if (icmp_redirect_remediation_status and ipv4_default_icmp_redirect_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirect_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.default.send_redirects configuration
      - name: 3.3.2 Ensure packet redirect sending is disabled | Audit
        shell:
          cmd: |
           'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.default.send_redirects\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.send_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_default_icmp_redirect_conf_check
        loop: "{{ sysctl_conf_files }}"

      # Update remediation status
      - set_fact:
          icmp_redirect_remediation_status: "{{ true if (icmp_redirect_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv4_default_icmp_redirect_conf_check.results | list }}"
        when: icmp_redirect_remediation_status
      
      # Check if net.ipv4.conf.default.send_redirects is configured in one of the UFW sysctl configuration files
      - name: 3.3.2 Ensure packet redirect sending is disabled | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.default.send_redirects\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.send_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_default_icmp_redirect_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          icmp_redirect_remediation_status: "{{ true if (icmp_redirect_remediation_status and ipv4_default_icmp_redirect_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirect_remediation_status

    # Extract audit result
    - set_fact:
        icmp_redirect_check:
          name: 3.3.2 Ensure packet redirect sending is disabled
          scored: true
          automated: true
          remediation_status: "{{ true if icmp_redirect_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [icmp_redirect_check] }}"
      changed_when: false

    # 3.3.2 Ensure packet redirect sending is disabled | Remediation
    - name: "3.3.2 Ensure packet redirect sending is disabled | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.all.send_redirects
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not icmp_redirect_check.remediation_status 
    
    # 3.3.2 Ensure packet redirect sending is disabled | Remediation
    - name: "3.3.2 Ensure packet redirect sending is disabled | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.default.send_redirects
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not icmp_redirect_check.remediation_status 
    
    # 3.3.2 Ensure packet redirect sending is disabled | Remediation
    - name: "3.3.2 Ensure packet redirect sending is disabled | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.route.flush
        value: 1
        sysctl_set: false
        reload: true
      when: not audit_only and not icmp_redirect_check.remediation_status 
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.3.3 Ensure bogus icmp responses are ignored
  #
  # Setting net.ipv4.icmp_ignore_bogus_error_responses to 1 prevents the kernel from
  # logging bogus responses (RFC-1122 non-compliant) from broadcast reframes, keeping
  # file systems from filling up with useless log messages.
  - name: "3.3.3 Ensure bogus icmp responses are ignored"
    block:
    # Check current net.ipv4.icmp_ignore_bogus_error_responses status
    - name: 3.3.3 Ensure bogus icmp responses are ignored | Audit
      shell:
        cmd: |
          ipv4="$(sysctl "net.ipv4.icmp_ignore_bogus_error_responses" | awk -F= '{print $2}')";
          echo $ipv4 | grep -q '1' && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: bogus_icmp_responses_current_status_conf_check

    # Define remediation status
    - set_fact: 
        bogus_icmp_responses_remediation_status: "{{ true if bogus_icmp_responses_current_status_conf_check.stdout == 'configured' else false }}"
      changed_when: false

    # Check net.ipv4.icmp_ignore_bogus_error_responses is disabled on sysctl.conf file
    - name: 3.3.3 Ensure bogus icmp responses are ignored | Audit
      shell:
        cmd: 'grep -Eq "^\s{0,}net.ipv4.icmp_ignore_bogus_error_responses\s{0,}=\s{0,}1" /etc/sysctl.conf && echo configured || echo not_configured'
      changed_when: false
      register: bogus_icmp_responses_sysctl_conf_check

    # Update remediation status
    - set_fact: 
        bogus_icmp_responses_remediation_status: "{{ true if (bogus_icmp_responses_remediation_status and bogus_icmp_responses_sysctl_conf_check.stdout == 'configured') else false }}"
      changed_when: false
      when: bogus_icmp_responses_remediation_status

    # Check if one of sysctl configuration files has net.ipv4.icmp_ignore_bogus_error_responses configuration
    - name: 3.3.3 Ensure bogus icmp responses are ignored | Audit
      shell:
        cmd: |
          'item_exists=$(grep -E "^\s{0,}net.ipv4.icmp_ignore_bogus_error_responses\s{0,}" {{ item }}';
          if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
            echo $item_exists | grep -Eq "^\s{0,}net.ipv4.icmp_ignore_bogus_error_responses\s{0,}=\s{0,}1" && echo configured || echo not_configured
          else
            echo configured
          fi;
      changed_when: false
      register: bogus_icmp_responses_conf_check
      loop: "{{ sysctl_conf_files }}"

    # Update remediation status
    - set_fact:
        bogus_icmp_responses_remediation_status: "{{ true if (bogus_icmp_responses_remediation_status or item.stdout == 'configured') else false }}"
      changed_when: false
      loop_control:
        label: "{{ item.stdout }}"
      loop: "{{ bogus_icmp_responses_conf_check.results | list }}"
      when: bogus_icmp_responses_remediation_status

    # Check if net.ipv4.icmp_ignore_bogus_error_responses is configured in one of the UFW sysctl configuration files
    - name: 3.3.3 Ensure bogus icmp responses are ignored | Audit
      shell:
        cmd: |
          ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
          item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.icmp_ignore_bogus_error_responses\s{0,}" $(echo $ufw_conf))
          if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
            echo $item_exists | grep -Eq "^\s{0,}net.ipv4.icmp_ignore_bogus_error_responses\s{0,}=\s{0,}1" && echo configured || echo not_configured
          else
            echo configured
          fi;
      changed_when: false
      register: bogus_icmp_responses_ufw_sysctl_conf_files_check
      
    # Update remediation status
    - set_fact: 
        bogus_icmp_responses_remediation_status: "{{ true if (bogus_icmp_responses_remediation_status and bogus_icmp_responses_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
      changed_when: false
      when: bogus_icmp_responses_remediation_status
    
    # Extract audit result
    - set_fact:
        bogus_icmp_responses_check:
          name: 3.3.3 Ensure bogus icmp responses are ignored
          scored: true
          automated: true
          remediation_status: "{{ true if bogus_icmp_responses_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [bogus_icmp_responses_check] }}"
      changed_when: false

    # 3.3.3 Ensure bogus icmp responses are ignored | Remediation
    - name: "3.3.3 Ensure bogus icmp responses are ignored | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.icmp_ignore_bogus_error_responses
        value: 1
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not bogus_icmp_responses_check.remediation_status 
    
    # 3.3.3 Ensure bogus icmp responses are ignored | Remediation
    - name: "3.3.3 Ensure bogus icmp responses are ignored | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.route.flush
        value: 1
        sysctl_set: false
        reload: true
      when: not audit_only and not bogus_icmp_responses_check.remediation_status 
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.3.4 Ensure broadcast icmp requests are ignored
  #
  # Setting net.ipv4.icmp_echo_ignore_broadcasts to 1 will cause the system to ignore all
  # ICMP echo and timestamp requests to broadcast and multicast addresses.
  - name: "3.3.4 Ensure broadcast icmp requests are ignored"
    block:
    # Check current net.ipv4.icmp_echo_ignore_broadcasts status
    - name: 3.3.4 Ensure broadcast icmp requests are ignored | Audit
      shell:
        cmd: |
          ipv4="$(sysctl "net.ipv4.icmp_echo_ignore_broadcasts" | awk -F= '{print $2}')";
          echo $ipv4 | grep -q '1' && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: icmp_broadcast_request_current_status_conf_check

    # Define remediation status
    - set_fact: 
        icmp_broadcast_request_remediation_status: "{{ true if icmp_broadcast_request_current_status_conf_check.stdout == 'configured' else false }}"
      changed_when: false

    # Check net.ipv4.icmp_echo_ignore_broadcasts is disabled on sysctl.conf file
    - name: 3.3.4 Ensure broadcast icmp requests are ignored | Audit
      shell:
        cmd: 'grep -Eq "^\s{0,}net.ipv4.icmp_echo_ignore_broadcasts\s{0,}=\s{0,}1" /etc/sysctl.conf && echo configured || echo not_configured'
      changed_when: false
      register: icmp_broadcast_request_sysctl_conf_check

    # Update remediation status
    - set_fact: 
        icmp_broadcast_request_remediation_status: "{{ true if (icmp_broadcast_request_remediation_status and icmp_broadcast_request_sysctl_conf_check.stdout == 'configured') else false }}"
      changed_when: false
      when: icmp_broadcast_request_remediation_status

    # Check if one of sysctl configuration files has net.ipv4.icmp_echo_ignore_broadcasts configuration
    - name: 3.3.4 Ensure broadcast icmp requests are ignored | Audit
      shell:
        cmd: |
          'item_exists=$(grep -E "^\s{0,}net.ipv4.icmp_echo_ignore_broadcasts\s{0,}" {{ item }}';
          if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
            echo $item_exists | grep -Eq "^\s{0,}net.ipv4.icmp_echo_ignore_broadcasts\s{0,}=\s{0,}1" && echo configured || echo not_configured
          else
            echo configured
          fi;
      changed_when: false
      register: icmp_broadcast_request_conf_check
      loop: "{{ sysctl_conf_files }}"

    # Update remediation status
    - set_fact:
        icmp_broadcast_request_remediation_status: "{{ true if (icmp_broadcast_request_remediation_status or item.stdout == 'configured') else false }}"
      changed_when: false
      loop_control:
        label: "{{ item.stdout }}"
      loop: "{{ icmp_broadcast_request_conf_check.results | list }}"
      when: icmp_broadcast_request_remediation_status

    # Check if net.ipv4.icmp_echo_ignore_broadcasts is configured in one of the UFW sysctl configuration files
    - name: 3.3.4 Ensure broadcast icmp requests are ignored | Audit
      shell:
        cmd: |
          ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
          item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.icmp_echo_ignore_broadcasts\s{0,}" $(echo $ufw_conf))
          if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
            echo $item_exists | grep -Eq "^\s{0,}net.ipv4.icmp_echo_ignore_broadcasts\s{0,}=\s{0,}1" && echo configured || echo not_configured
          else
            echo configured
          fi;
      changed_when: false
      register: icmp_broadcast_request_ufw_sysctl_conf_files_check
      
    # Update remediation status
    - set_fact: 
        icmp_broadcast_request_remediation_status: "{{ true if (icmp_broadcast_request_remediation_status and icmp_broadcast_request_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
      changed_when: false
      when: icmp_broadcast_request_remediation_status
    
    # Extract audit result
    - set_fact:
        icmp_broadcast_request_check:
          name: 3.3.4 Ensure broadcast icmp requests are ignored
          scored: true
          automated: true
          remediation_status: "{{ true if icmp_broadcast_request_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [icmp_broadcast_request_check] }}"
      changed_when: false

    # 3.3.4 Ensure broadcast icmp requests are ignored | Remediation
    - name: "3.3.4 Ensure broadcast icmp requests are ignored | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.icmp_echo_ignore_broadcasts
        value: 1
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not icmp_broadcast_request_check.remediation_status 
    
    # 3.3.4 Ensure broadcast icmp requests are ignored | Remediation
    - name: "3.3.4 Ensure broadcast icmp requests are ignored | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.route.flush
        value: 1
        sysctl_set: false
        reload: true
      when: not audit_only and not icmp_broadcast_request_check.remediation_status 
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.3.5 Ensure icmp redirects are not accepted
  #
  # ICMP redirect messages are packets that convey routing information and tell your host
  # (acting as a router) to send packets via an alternate path. It is a way of allowing an
  # outside routing device to update your system routing tables.
  - name: "3.3.5 Ensure icmp redirects are not accepted"
    block:
    # Audit net.ipv4.conf.all.accept_redirects status
    - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
      block:
      # Check current net.ipv4.conf.all.accept_redirects status
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.all.accept_redirects" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv4_icmp_redirects_all_accept_current_status_conf_check

      # Define remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if ipv4_icmp_redirects_all_accept_current_status_conf_check.stdout == 'configured' else false }}"
        changed_when: false

      # Check net.ipv4.conf.all.accept_redirects is disabled on sysctl.conf file
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.all.accept_redirects\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv4_icmp_redirects_all_accept_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status and ipv4_icmp_redirects_all_accept_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirects_accept_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.all.accept_redirects configuration
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.all.accept_redirects\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.accept_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_icmp_redirects_all_accept_conf_check
        loop: "{{ sysctl_conf_files }}"

     # Update remediation status
      - set_fact:
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv4_icmp_redirects_all_accept_conf_check.results | list }}"
        when: icmp_redirects_accept_remediation_status

      # Check if net.ipv4.conf.all.accept_redirects is configured in one of the UFW sysctl configuration files
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.all.accept_redirects\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.accept_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_icmp_redirects_all_accept_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status and ipv4_icmp_redirects_all_accept_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirects_accept_remediation_status

    # Audit net.ipv4.conf.default.accept_redirects status
    - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
      block:
      # Check current net.ipv4.conf.default.accept_redirects status
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.default.accept_redirects" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv4_icmp_redirects_default_accept_current_status_conf_check

      # Define remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if ipv4_icmp_redirects_default_accept_current_status_conf_check.stdout == 'configured' else false }}"
        changed_when: false

      # Check net.ipv4.conf.default.accept_redirects is disabled on sysctl.conf file
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.default.accept_redirects\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv4_icmp_redirects_default_accept_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status and ipv4_icmp_redirects_default_accept_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirects_accept_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.default.accept_redirects configuration
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.default.accept_redirects\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.accept_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_icmp_redirects_default_accept_conf_check
        loop: "{{ sysctl_conf_files }}"

     # Update remediation status
      - set_fact:
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv4_icmp_redirects_default_accept_conf_check.results | list }}"
        when: icmp_redirects_accept_remediation_status

      # Check if net.ipv4.conf.default.accept_redirects is configured in one of the UFW sysctl configuration files
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.default.accept_redirects\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.accept_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_icmp_redirects_default_accept_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status and ipv4_icmp_redirects_default_accept_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirects_accept_remediation_status
    
    # Audit net.ipv6.conf.all.accept_redirects
    - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
      block:
      # Check current net.ipv6.conf.all.accept_redirects status
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ipv6="$(sysctl "net.ipv6.conf.all.accept_redirects" | awk -F= '{print $2}')";
            echo $ipv6 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv6_icmp_redirects_all_accept_current_status_conf_check

      # Update remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status and ipv6_icmp_redirects_all_accept_current_status_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirects_accept_remediation_status

      # Check net.ipv6.conf.all.accept_redirects is disabled on sysctl.conf file
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv6.conf.all.accept_redirects\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv6_icmp_redirects_all_accept_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status and ipv6_icmp_redirects_all_accept_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirects_accept_remediation_status

      # Check if one of sysctl configuration files has net.ipv6.conf.all.accept_redirects configuration
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
           'item_exists=$(grep -E "^\s{0,}net.ipv6.conf.all.accept_redirects\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.all.accept_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_icmp_redirects_all_accept_conf_check
        loop: "{{ sysctl_conf_files }}"

      # Update remediation status
      - set_fact:
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv6_icmp_redirects_all_accept_conf_check.results | list }}"
        when: icmp_redirects_accept_remediation_status
      
      # Check if net.ipv6.conf.all.accept_redirects is configured in one of the UFW sysctl configuration files
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv6.conf.all.accept_redirects\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.all.accept_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_icmp_redirects_all_accept_ufw_sysctl_conf_files_check

      # Update remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status and ipv6_icmp_redirects_all_accept_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirects_accept_remediation_status

    # Audit net.ipv6.conf.default.accept_redirects
    - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
      block:
      # Check current net.ipv6.conf.default.accept_redirects status
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ipv6="$(sysctl "net.ipv6.conf.default.accept_redirects" | awk -F= '{print $2}')";
            echo $ipv6 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv6_icmp_redirects_default_accept_current_status_conf_check

      # Update remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status and ipv6_icmp_redirects_default_accept_current_status_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirects_accept_remediation_status

      # Check net.ipv6.conf.default.accept_redirects is disabled on sysctl.conf file
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv6.conf.default.accept_redirects\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv6_icmp_redirects_default_accept_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status and ipv6_icmp_redirects_default_accept_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirects_accept_remediation_status

      # Check if one of sysctl configuration files has net.ipv6.conf.default.accept_redirects configuration
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
           'item_exists=$(grep -E "^\s{0,}net.ipv6.conf.default.accept_redirects\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.default.accept_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_icmp_redirects_default_accept_conf_check
        loop: "{{ sysctl_conf_files }}"

      # Update remediation status
      - set_fact:
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv6_icmp_redirects_default_accept_conf_check.results | list }}"
        when: icmp_redirects_accept_remediation_status
      
      # Check if net.ipv6.conf.default.accept_redirects is configured in one of the UFW sysctl configuration files
      - name: 3.3.5 Ensure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv6.conf.default.accept_redirects\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.default.accept_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_icmp_redirects_default_accept_ufw_sysctl_conf_files_check   
      
      # Update remediation status
      - set_fact: 
          icmp_redirects_accept_remediation_status: "{{ true if (icmp_redirects_accept_remediation_status and ipv6_icmp_redirects_default_accept_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: icmp_redirects_accept_remediation_status

    # Extract audit result
    - set_fact:
        icmp_redirects_accept_check:
          name: 3.3.5 Ensure icmp redirects are not accepted
          scored: true
          automated: true
          remediation_status: "{{ true if icmp_redirects_accept_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [icmp_redirects_accept_check] }}"
      changed_when: false

    # 3.3.5 Ensure icmp redirects are not accepted | Remediation
    - name: "3.3.5 Ensure icmp redirects are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.all.accept_redirects
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not icmp_redirects_accept_check.remediation_status 
    
    # 3.3.5 Ensure icmp redirects are not accepted | Remediation
    - name: "3.3.5 Ensure icmp redirects are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.default.accept_redirects
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not icmp_redirects_accept_check.remediation_status 

    # 3.3.5 Ensure icmp redirects are not accepted | Remediation
    - name: "3.3.5 Ensure icmp redirects are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.accept_redirects
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not icmp_redirects_accept_check.remediation_status 

    # 3.3.5 Ensure icmp redirects are not accepted | Remediation
    - name: "3.3.5 Ensure icmp redirects are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv6.conf.default.accept_redirects
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not icmp_redirects_accept_check.remediation_status 
    
    # 3.3.5 Ensure icmp redirects are not accepted | Remediation
    - name: "3.3.5 Ensure icmp redirects are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.route.flush
        value: 1
        sysctl_set: false
        reload: true
      when: not audit_only and not icmp_redirects_accept_check.remediation_status 
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.3.6 Ensure secure icmp redirects are not accepted
  #
  # Secure ICMP redirects are the same as ICMP redirects, except they come from
  # gateways listed on the default gateway list. It is assumed that these gateways are
  # known to your system, and that they are likely to be secure.
  - name: "3.3.6 Ensure secure icmp redirects are not accepted"
    block:
    # Audit net.ipv4.conf.all.secure_redirects status
    - name: 3.3.6 Ensure secure icmp redirects are not accepted | Audit
      block:
      # Check current net.ipv4.conf.all.secure_redirects status
      - name: 3.3.6 Ensure secure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.all.secure_redirects" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: secure_icmp_all_redirects_current_status_conf_check

      # Define remediation status
      - set_fact: 
          secure_icmp_redirects_remediation_status: "{{ true if secure_icmp_all_redirects_current_status_conf_check.stdout == 'configured' else false }}"
        changed_when: false

      # Check net.ipv4.conf.all.secure_redirects is disabled on sysctl.conf file
      - name: 3.3.6 Ensure secure icmp redirects are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.all.secure_redirects\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: secure_icmp_all_redirects_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          secure_icmp_redirects_remediation_status: "{{ true if (secure_icmp_redirects_remediation_status and secure_icmp_all_redirects_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: secure_icmp_redirects_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.all.secure_redirects configuration
      - name: 3.3.6 Ensure secure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.all.secure_redirects\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.secure_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: secure_icmp_all_redirects_conf_check
        loop: "{{ sysctl_conf_files }}"

     # Update remediation status
      - set_fact:
          secure_icmp_redirects_remediation_status: "{{ true if (secure_icmp_redirects_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ secure_icmp_all_redirects_conf_check.results | list }}"
        when: secure_icmp_redirects_remediation_status

      # Check if net.ipv4.conf.all.secure_redirects is configured in one of the UFW sysctl configuration files
      - name: 3.3.6 Ensure secure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.all.secure_redirects\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.secure_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: secure_icmp_all_redirects_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          secure_icmp_redirects_remediation_status: "{{ true if (secure_icmp_redirects_remediation_status and secure_icmp_all_redirects_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: secure_icmp_redirects_remediation_status
    
    # Audit net.ipv4.conf.default.secure_redirects status
    - name: 3.3.6 Ensure secure icmp redirects are not accepted | Audit
      block:
      # Check current net.ipv4.conf.default.secure_redirects status
      - name: 3.3.6 Ensure secure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.default.secure_redirects" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: secure_icmp_default_redirects_current_status_conf_check

      # Update remediation status
      - set_fact: 
          secure_icmp_redirects_remediation_status: "{{ true if (secure_icmp_redirects_remediation_status and secure_icmp_default_redirects_current_status_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: secure_icmp_redirects_remediation_status

      # Check net.ipv4.conf.default.secure_redirects is disabled on sysctl.conf file
      - name: 3.3.6 Ensure secure icmp redirects are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.default.secure_redirects\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: secure_icmp_default_redirects_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          secure_icmp_redirects_remediation_status: "{{ true if (secure_icmp_redirects_remediation_status and secure_icmp_default_redirects_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: secure_icmp_redirects_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.default.secure_redirects configuration
      - name: 3.3.6 Ensure secure icmp redirects are not accepted | Audit
        shell:
          cmd: |
           'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.default.secure_redirects\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.secure_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: secure_icmp_default_redirects_conf_check
        loop: "{{ sysctl_conf_files }}"

      # Update remediation status
      - set_fact:
          secure_icmp_redirects_remediation_status: "{{ true if (secure_icmp_redirects_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ secure_icmp_default_redirects_conf_check.results | list }}"
        when: secure_icmp_redirects_remediation_status
      
      # Check if net.ipv4.conf.default.secure_redirects is configured in one of the UFW sysctl configuration files
      - name: 3.3.6 Ensure secure icmp redirects are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.default.secure_redirects\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.secure_redirects\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: secure_icmp_default_redirects_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          secure_icmp_redirects_remediation_status: "{{ true if (secure_icmp_redirects_remediation_status and secure_icmp_default_redirects_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: secure_icmp_redirects_remediation_status

    # Extract audit result
    - set_fact:
         secure_icmp_redirects_check:
          name: 3.3.6 Ensure secure icmp redirects are not accepted
          scored: true
          automated: true
          remediation_status: "{{ true if secure_icmp_redirects_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [secure_icmp_redirects_check] }}"
      changed_when: false

    # 3.3.6 Ensure secure icmp redirects are not accepted | Remediation
    - name: "3.3.6 Ensure secure icmp redirects are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.all.secure_redirects
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not secure_icmp_redirects_check.remediation_status 
    
    # 3.3.6 Ensure secure icmp redirects are not accepted | Remediation
    - name: "3.3.6 Ensure secure icmp redirects are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.default.secure_redirects
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not secure_icmp_redirects_check.remediation_status 
    
    # 3.3.6 Ensure secure icmp redirects are not accepted | Remediation
    - name: "3.3.6 Ensure secure icmp redirects are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.route.flush
        value: 1
        sysctl_set: false
        reload: true
      when: not audit_only and not secure_icmp_redirects_check.remediation_status 
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.3.7 Ensure reverse path filtering is enabled
  #
  # Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1
  # forces the Linux kernel to utilize reverse path filtering on a received packet to determine
  # if the packet was valid. Essentially, with reverse path filtering, if the return packet does
  # not go out the same interface that the corresponding source packet came from, the
  # packet is dropped (and logged if log_martians is set).
  - name: "3.3.7 Ensure reverse path filtering is enabled"
    block:
    # Audit net.ipv4.conf.all.rp_filter status
    - name: 3.3.7 Ensure reverse path filtering is enabled | Audit
      block:
      # Check current net.ipv4.conf.all.rp_filter status
      - name: 3.3.7 Ensure reverse path filtering is enabled | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.all.rp_filter" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '1' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv4_reverse_path_filter_all_status_conf_check

      # Define remediation status
      - set_fact: 
          ipv4_reverse_path_filter_remediation_status: "{{ true if ipv4_reverse_path_filter_all_status_conf_check.stdout == 'configured' else false }}"
        changed_when: false

      # Check net.ipv4.conf.all.rp_filter is disabled on sysctl.conf file
      - name: 3.3.7 Ensure reverse path filtering is enabled | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.all.rp_filter\s{0,}=\s{0,}1" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv4_reverse_path_filter_all_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          ipv4_reverse_path_filter_remediation_status: "{{ true if (ipv4_reverse_path_filter_remediation_status and ipv4_reverse_path_filter_all_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv4_reverse_path_filter_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.all.rp_filter configuration
      - name: 3.3.7 Ensure reverse path filtering is enabled | Audit
        shell:
          cmd: |
            'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.all.rp_filter\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.rp_filter\s{0,}=\s{0,}1" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_reverse_path_filter_all_conf_check
        loop: "{{ sysctl_conf_files }}"

     # Update remediation status
      - set_fact:
          ipv4_reverse_path_filter_remediation_status: "{{ true if (ipv4_reverse_path_filter_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv4_reverse_path_filter_all_conf_check.results | list }}"
        when: ipv4_reverse_path_filter_remediation_status

      # Check if net.ipv4.conf.all.rp_filter is configured in one of the UFW sysctl configuration files
      - name: 3.3.7 Ensure reverse path filtering is enabled | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.all.rp_filter\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.rp_filter\s{0,}=\s{0,}1" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_reverse_path_filter_all_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          ipv4_reverse_path_filter_remediation_status: "{{ true if (ipv4_reverse_path_filter_remediation_status and ipv4_reverse_path_filter_all_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv4_reverse_path_filter_remediation_status
    
    # Audit net.ipv4.conf.default.rp_filter status
    - name: 3.3.7 Ensure reverse path filtering is enabled | Audit
      block:
      # Check current net.ipv4.conf.default.rp_filter status
      - name: 3.3.7 Ensure reverse path filtering is enabled | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.default.rp_filter" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '1' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv4_reverse_path_filter_default_current_status_conf_check

      # Update remediation status
      - set_fact: 
          ipv4_reverse_path_filter_remediation_status: "{{ true if (ipv4_reverse_path_filter_remediation_status and ipv4_reverse_path_filter_default_current_status_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv4_reverse_path_filter_remediation_status

      # Check net.ipv4.conf.default.rp_filter is disabled on sysctl.conf file
      - name: 3.3.7 Ensure reverse path filtering is enabled | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.default.rp_filter\s{0,}=\s{0,}1" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv4_reverse_path_filter_default_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          ipv4_reverse_path_filter_remediation_status: "{{ true if (ipv4_reverse_path_filter_remediation_status and ipv4_reverse_path_filter_default_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv4_reverse_path_filter_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.default.rp_filter configuration
      - name: 3.3.7 Ensure reverse path filtering is enabled | Audit
        shell:
          cmd: |
           'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.default.rp_filter\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.rp_filter\s{0,}=\s{0,}1" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_reverse_path_filter_default_conf_check
        loop: "{{ sysctl_conf_files }}"

      # Update remediation status
      - set_fact:
          ipv4_reverse_path_filter_remediation_status: "{{ true if (ipv4_reverse_path_filter_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv4_reverse_path_filter_default_conf_check.results | list }}"
        when: ipv4_reverse_path_filter_remediation_status
      
      # Check if net.ipv4.conf.default.rp_filter is configured in one of the UFW sysctl configuration files
      - name: 3.3.7 Ensure reverse path filtering is enabled | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.default.rp_filter\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.rp_filter\s{0,}=\s{0,}1" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_reverse_path_filter_default_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          ipv4_reverse_path_filter_remediation_status: "{{ true if (ipv4_reverse_path_filter_remediation_status and ipv4_reverse_path_filter_default_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv4_reverse_path_filter_remediation_status

    # Extract audit result
    - set_fact:
        reverse_path_filter_check:
          name: 3.3.7 Ensure reverse path filtering is enabled
          scored: true
          automated: true
          remediation_status: "{{ true if ipv4_reverse_path_filter_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [reverse_path_filter_check] }}"
      changed_when: false

    # 3.3.7 Ensure reverse path filtering is enabled | Remediation
    - name: "3.3.7 Ensure reverse path filtering is enabled | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.all.rp_filter
        value: 1
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not reverse_path_filter_check.remediation_status 
    
    # 3.3.7 Ensure reverse path filtering is enabled | Remediation
    - name: "3.3.7 Ensure reverse path filtering is enabled | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.default.rp_filter
        value: 1
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not reverse_path_filter_check.remediation_status 
    
    # 3.3.7 Ensure reverse path filtering is enabled | Remediation
    - name: "3.3.7 Ensure reverse path filtering is enabled | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.route.flush
        value: 1
        sysctl_set: false
        reload: true
      when: not audit_only and not reverse_path_filter_check.remediation_status 
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.3.8 Ensure source routed packets are not accepted
  #
  # In networking, source routing allows a sender to partially or fully specify the route
  # packets take through a network. In contrast, non-source routed packets travel a path
  # determined by routers in the network. In some cases, systems may not be routable or
  # reachable from some locations (e.g. private addresses vs. Internet routable), and so
  # source routed packets would need to be used.
  - name: "3.3.8 Ensure source routed packets are not accepted"
    block:
    # Audit net.ipv4.conf.all.accept_source_route status
    - name: 3.3.8 Ensure source routed packets are not accepted | Audit
      block:
      # Check current net.ipv4.conf.all.accept_source_route status
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.all.accept_source_route" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv4_source_routed_packet_all_current_status_conf_check

      # Define remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if ipv4_source_routed_packet_all_current_status_conf_check.stdout == 'configured' else false }}"
        changed_when: false

      # Check net.ipv4.conf.all.accept_source_route is disabled on sysctl.conf file
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.all.accept_source_route\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv4_source_routed_packet_all_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status and ipv4_source_routed_packet_all_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: source_routed_packet_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.all.accept_source_route configuration
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
            'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.all.accept_source_route\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.accept_source_route\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_source_routed_packet_all_conf_check
        loop: "{{ sysctl_conf_files }}"

     # Update remediation status
      - set_fact:
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv4_source_routed_packet_all_conf_check.results | list }}"
        when: source_routed_packet_remediation_status

      # Check if net.ipv4.conf.all.accept_source_route is configured in one of the UFW sysctl configuration files
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.all.accept_source_route\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.accept_source_route\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_source_routed_packet_all_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status and ipv4_source_routed_packet_all_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: source_routed_packet_remediation_status

    # Audit net.ipv4.conf.default.accept_source_route status
    - name: 3.3.8 Ensure source routed packets are not accepted | Audit
      block:
      # Check current net.ipv4.conf.default.accept_source_route status
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.default.accept_source_route" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv4_source_routed_packet_default_current_status_conf_check

      # Define remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if ipv4_source_routed_packet_default_current_status_conf_check.stdout == 'configured' else false }}"
        changed_when: false

      # Check net.ipv4.conf.default.accept_source_route is disabled on sysctl.conf file
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.default.accept_source_route\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv4_source_routed_packet_default_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status and ipv4_source_routed_packet_default_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: source_routed_packet_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.default.accept_source_route configuration
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
            'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.default.accept_source_route\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.accept_source_route\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_source_routed_packet_default_conf_check
        loop: "{{ sysctl_conf_files }}"

     # Update remediation status
      - set_fact:
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv4_source_routed_packet_default_conf_check.results | list }}"
        when: source_routed_packet_remediation_status

      # Check if net.ipv4.conf.default.accept_source_route is configured in one of the UFW sysctl configuration files
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.default.accept_source_route\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.accept_source_route\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_source_routed_packet_default_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status and ipv4_source_routed_packet_default_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: source_routed_packet_remediation_status
    
    # Audit net.ipv6.conf.all.accept_source_route
    - name: 3.3.8 Ensure source routed packets are not accepted | Audit
      block:
      # Check current net.ipv6.conf.all.accept_source_route status
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
            ipv6="$(sysctl "net.ipv6.conf.all.accept_source_route" | awk -F= '{print $2}')";
            echo $ipv6 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv6_source_routed_packet_all_current_status_conf_check

      # Update remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status and ipv6_source_routed_packet_all_current_status_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: source_routed_packet_remediation_status

      # Check net.ipv6.conf.all.accept_source_route is disabled on sysctl.conf file
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv6.conf.all.accept_source_route\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv6_source_routed_packet_all_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status and ipv6_source_routed_packet_all_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: source_routed_packet_remediation_status

      # Check if one of sysctl configuration files has net.ipv6.conf.all.accept_source_route configuration
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
           'item_exists=$(grep -E "^\s{0,}net.ipv6.conf.all.accept_source_route\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.all.accept_source_route\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_source_routed_packet_all_conf_check
        loop: "{{ sysctl_conf_files }}"

      # Update remediation status
      - set_fact:
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv6_source_routed_packet_all_conf_check.results | list }}"
        when: source_routed_packet_remediation_status
      
      # Check if net.ipv6.conf.all.accept_source_route is configured in one of the UFW sysctl configuration files
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv6.conf.all.accept_source_route\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.all.accept_source_route\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_source_routed_packet_all_ufw_sysctl_conf_files_check

      # Update remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status and ipv6_source_routed_packet_all_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: source_routed_packet_remediation_status

    # Audit net.ipv6.conf.default.accept_source_route
    - name: 3.3.8 Ensure source routed packets are not accepted | Audit
      block:
      # Check current net.ipv6.conf.default.accept_source_route status
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
            ipv6="$(sysctl "net.ipv6.conf.default.accept_source_route" | awk -F= '{print $2}')";
            echo $ipv6 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv6_source_routed_packet_default_current_status_conf_check

      # Update remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status and ipv6_source_routed_packet_default_current_status_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: source_routed_packet_remediation_status

      # Check net.ipv6.conf.default.accept_source_route is disabled on sysctl.conf file
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv6.conf.default.accept_source_route\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv6_source_routed_packet_default_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status and ipv6_source_routed_packet_default_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: source_routed_packet_remediation_status

      # Check if one of sysctl configuration files has net.ipv6.conf.default.accept_source_route configuration
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
           'item_exists=$(grep -E "^\s{0,}net.ipv6.conf.default.accept_source_route\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.default.accept_source_route\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_source_routed_packet_default_conf_check
        loop: "{{ sysctl_conf_files }}"

      # Update remediation status
      - set_fact:
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv6_source_routed_packet_default_conf_check.results | list }}"
        when: source_routed_packet_remediation_status
      
      # Check if net.ipv6.conf.default.accept_source_route is configured in one of the UFW sysctl configuration files
      - name: 3.3.8 Ensure source routed packets are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv6.conf.default.accept_source_route\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.default.accept_source_route\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_source_routed_packet_default_ufw_sysctl_conf_files_check   
      
      # Update remediation status
      - set_fact: 
          source_routed_packet_remediation_status: "{{ true if (source_routed_packet_remediation_status and ipv6_source_routed_packet_default_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: source_routed_packet_remediation_status

    # Extract audit result
    - set_fact:
        source_routed_packet_check:
          name: 3.3.8 Ensure source routed packets are not accepted
          scored: true
          automated: true
          remediation_status: "{{ true if source_routed_packet_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [source_routed_packet_check] }}"
      changed_when: false

    # 3.3.8 Ensure source routed packets are not accepted | Remediation
    - name: "3.3.8 Ensure source routed packets are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.all.accept_source_route
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not source_routed_packet_check.remediation_status 
    
    # 3.3.8 Ensure source routed packets are not accepted | Remediation
    - name: "3.3.8 Ensure source routed packets are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.default.accept_source_route
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not source_routed_packet_check.remediation_status 

    # 3.3.8 Ensure source routed packets are not accepted | Remediation
    - name: "3.3.8 Ensure source routed packets are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.accept_source_route
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not source_routed_packet_check.remediation_status 

    # 3.3.8 Ensure source routed packets are not accepted | Remediation
    - name: "3.3.8 Ensure source routed packets are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv6.conf.default.accept_source_route
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not source_routed_packet_check.remediation_status 
    
    # 3.3.8 Ensure source routed packets are not accepted | Remediation
    - name: "3.3.8 Ensure source routed packets are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.route.flush
        value: 1
        sysctl_set: false
        reload: true
      when: not audit_only and not source_routed_packet_check.remediation_status 
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.3.9 Ensure suspicious packets are logged
  #
  # When enabled, this feature logs packets with un-routable source addresses to the
  # kernel log.
  - name: "3.3.9 Ensure suspicious packets are logged"
    block:
    # Audit net.ipv4.conf.all.log_martians status
    - name: 3.3.9 Ensure suspicious packets are logged | Audit
      block:
      # Check current net.ipv4.conf.all.log_martians status
      - name: 3.3.9 Ensure suspicious packets are logged | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.all.log_martians" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '1' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv4_suspicious_log_all_current_status_conf_check

      # Define remediation status
      - set_fact: 
          ipv4_suspicious_log_remediation_status: "{{ true if ipv4_suspicious_log_all_current_status_conf_check.stdout == 'configured' else false }}"
        changed_when: false

      # Check net.ipv4.conf.all.log_martians is disabled on sysctl.conf file
      - name: 3.3.9 Ensure suspicious packets are logged | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.all.log_martians\s{0,}=\s{0,}1" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv4_suspicious_log_all_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          ipv4_suspicious_log_remediation_status: "{{ true if (ipv4_suspicious_log_remediation_status and ipv4_suspicious_log_all_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv4_suspicious_log_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.all.log_martians configuration
      - name: 3.3.9 Ensure suspicious packets are logged | Audit
        shell:
          cmd: |
            'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.all.log_martians\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.log_martians\s{0,}=\s{0,}1" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_suspicious_log_all_conf_check
        loop: "{{ sysctl_conf_files }}"

     # Update remediation status
      - set_fact:
          ipv4_suspicious_log_remediation_status: "{{ true if (ipv4_suspicious_log_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv4_suspicious_log_all_conf_check.results | list }}"
        when: ipv4_suspicious_log_remediation_status

      # Check if net.ipv4.conf.all.log_martians is configured in one of the UFW sysctl configuration files
      - name: 3.3.9 Ensure suspicious packets are logged | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.all.log_martians\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.all.log_martians\s{0,}=\s{0,}1" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_suspicious_log_all_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          ipv4_suspicious_log_remediation_status: "{{ true if (ipv4_suspicious_log_remediation_status and ipv4_suspicious_log_all_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv4_suspicious_log_remediation_status
    
    # Audit net.ipv4.conf.default.log_martians status
    - name: 3.3.9 Ensure suspicious packets are logged | Audit
      block:
      # Check current net.ipv4.conf.default.log_martians status
      - name: 3.3.9 Ensure suspicious packets are logged | Audit
        shell:
          cmd: |
            ipv4="$(sysctl "net.ipv4.conf.default.log_martians" | awk -F= '{print $2}')";
            echo $ipv4 | grep -q '1' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv4_suspicious_log_default_current_status_conf_check

      # Update remediation status
      - set_fact: 
          ipv4_suspicious_log_remediation_status: "{{ true if (ipv4_suspicious_log_remediation_status and ipv4_suspicious_log_default_current_status_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv4_suspicious_log_remediation_status

      # Check net.ipv4.conf.default.log_martians is disabled on sysctl.conf file
      - name: 3.3.9 Ensure suspicious packets are logged | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv4.conf.default.log_martians\s{0,}=\s{0,}1" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv4_suspicious_log_default_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          ipv4_suspicious_log_remediation_status: "{{ true if (ipv4_suspicious_log_remediation_status and ipv4_suspicious_log_default_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv4_suspicious_log_remediation_status

      # Check if one of sysctl configuration files has net.ipv4.conf.default.log_martians configuration
      - name: 3.3.9 Ensure suspicious packets are logged | Audit
        shell:
          cmd: |
           'item_exists=$(grep -E "^\s{0,}net.ipv4.conf.default.log_martians\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.log_martians\s{0,}=\s{0,}1" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_suspicious_log_default_conf_check
        loop: "{{ sysctl_conf_files }}"

      # Update remediation status
      - set_fact:
          ipv4_suspicious_log_remediation_status: "{{ true if (ipv4_suspicious_log_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv4_suspicious_log_default_conf_check.results | list }}"
        when: ipv4_suspicious_log_remediation_status
      
      # Check if net.ipv4.conf.default.log_martians is configured in one of the UFW sysctl configuration files
      - name: 3.3.9 Ensure suspicious packets are logged | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.conf.default.log_martians\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv4.conf.default.log_martians\s{0,}=\s{0,}1" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv4_suspicious_log_default_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          ipv4_suspicious_log_remediation_status: "{{ true if (ipv4_suspicious_log_remediation_status and ipv4_suspicious_log_default_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv4_suspicious_log_remediation_status

    # Extract audit result
    - set_fact:
        ipv4_suspicious_log_check:
          name: 3.3.9 Ensure suspicious packets are logged
          scored: true
          automated: true
          remediation_status: "{{ true if ipv4_suspicious_log_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ipv4_suspicious_log_check] }}"
      changed_when: false

    # 3.3.9 Ensure suspicious packets are logged | Remediation
    - name: "3.3.9 Ensure suspicious packets are logged | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.all.log_martians
        value: 1
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not ipv4_suspicious_log_check.remediation_status 
    
    # 3.3.9 Ensure suspicious packets are logged | Remediation
    - name: "3.3.9 Ensure suspicious packets are logged | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.conf.default.log_martians
        value: 1
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not ipv4_suspicious_log_check.remediation_status 
    
    # 3.3.9 Ensure suspicious packets are logged | Remediation
    - name: "3.3.9 Ensure suspicious packets are logged | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.route.flush
        value: 1
        sysctl_set: false
        reload: true
      when: not audit_only and not ipv4_suspicious_log_check.remediation_status 
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.3.10 Ensure tcp syn cookies is enabled
  #
  # When tcp_syncookies is set, the kernel will handle TCP SYN packets normally until the
  # half-open connection queue is full, at which time, the SYN cookie functionality kicks in.
  # SYN cookies work by not using the SYN queue at all. Instead, the kernel simply replies
  # to the SYN with a SYN|ACK, but will include a specially crafted TCP sequence number
  # that encodes the source and destination IP address and port number and the time the
  # packet was sent. A legitimate connection would send the ACK packet of the three way
  # handshake with the specially crafted sequence number. This allows the system to verify
  # that it has received a valid response to a SYN cookie and allow the connection, even
  # though there is no corresponding SYN in the queue.
  - name: "3.3.10 Ensure tcp syn cookies is enabled"
    block:
    # Check current net.ipv4.tcp_syncookies status
    - name: 3.3.10 Ensure tcp syn cookies is enabled | Audit
      shell:
        cmd: |
          ipv4="$(sysctl "net.ipv4.tcp_syncookies" | awk -F= '{print $2}')";
          echo $ipv4 | grep -q '1' && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: tcp_syn_cookies_current_status_conf_check

    # Define remediation status
    - set_fact: 
        tcp_syn_cookies_remediation_status: "{{ true if tcp_syn_cookies_current_status_conf_check.stdout == 'configured' else false }}"
      changed_when: false

    # Check net.ipv4.tcp_syncookies is disabled on sysctl.conf file
    - name: 3.3.10 Ensure tcp syn cookies is enabled | Audit
      shell:
        cmd: 'grep -Eq "^\s{0,}net.ipv4.tcp_syncookies\s{0,}=\s{0,}1" /etc/sysctl.conf && echo configured || echo not_configured'
      changed_when: false
      register: tcp_syn_cookies_sysctl_conf_check

    # Update remediation status
    - set_fact: 
        tcp_syn_cookies_remediation_status: "{{ true if (tcp_syn_cookies_remediation_status and tcp_syn_cookies_sysctl_conf_check.stdout == 'configured') else false }}"
      changed_when: false
      when: tcp_syn_cookies_remediation_status

    # Check if one of sysctl configuration files has net.ipv4.tcp_syncookies configuration
    - name: 3.3.10 Ensure tcp syn cookies is enabled | Audit
      shell:
        cmd: |
          'item_exists=$(grep -E "^\s{0,}net.ipv4.tcp_syncookies\s{0,}" {{ item }}';
          if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
            echo $item_exists | grep -Eq "^\s{0,}net.ipv4.tcp_syncookies\s{0,}=\s{0,}1" && echo configured || echo not_configured
          else
            echo configured
          fi;
      changed_when: false
      register: tcp_syn_cookies_conf_check
      loop: "{{ sysctl_conf_files }}"

    # Update remediation status
    - set_fact:
        tcp_syn_cookies_remediation_status: "{{ true if (tcp_syn_cookies_remediation_status or item.stdout == 'configured') else false }}"
      changed_when: false
      loop_control:
        label: "{{ item.stdout }}"
      loop: "{{ tcp_syn_cookies_conf_check.results | list }}"
      when: tcp_syn_cookies_remediation_status

    # Check if net.ipv4.tcp_syncookies is configured in one of the UFW sysctl configuration files
    - name: 3.3.10 Ensure tcp syn cookies is enabled | Audit
      shell:
        cmd: |
          ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
          item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv4.tcp_syncookies\s{0,}" $(echo $ufw_conf))
          if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
            echo $item_exists | grep -Eq "^\s{0,}net.ipv4.tcp_syncookies\s{0,}=\s{0,}1" && echo configured || echo not_configured
          else
            echo configured
          fi;
      changed_when: false
      register: tcp_syn_cookies_ufw_sysctl_conf_files_check
      
    # Update remediation status
    - set_fact: 
        tcp_syn_cookies_remediation_status: "{{ true if (tcp_syn_cookies_remediation_status and tcp_syn_cookies_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
      changed_when: false
      when: tcp_syn_cookies_remediation_status
    
    # Extract audit result
    - set_fact:
        tcp_syn_cookies_check:
          name: 3.3.10 Ensure tcp syn cookies is enabled
          scored: true
          automated: true
          remediation_status: "{{ true if tcp_syn_cookies_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [tcp_syn_cookies_check] }}"
      changed_when: false

    # 3.3.10 Ensure tcp syn cookies is enabled | Remediation
    - name: "3.3.10 Ensure tcp syn cookies is enabled | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.tcp_syncookies
        value: 1
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not tcp_syn_cookies_check.remediation_status 
    
    # 3.3.10 Ensure tcp syn cookies is enabled | Remediation
    - name: "3.3.10 Ensure tcp syn cookies is enabled | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.route.flush
        value: 1
        sysctl_set: false
        reload: true
      when: not audit_only and not tcp_syn_cookies_check.remediation_status 
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 3.3.11 Ensure ipv6 router advertisements are not accepted
  #
  # This setting disables the system's ability to accept IPv6 router advertisements.
  - name: "3.3.11 Ensure ipv6 router advertisements are not accepted"
    block:
    # Audit net.ipv6.conf.all.accept_ra status
    - name: 3.3.11 Ensure ipv6 router advertisements are not accepted | Audit
      block:
      # Check current net.ipv6.conf.all.accept_ra status
      - name: 3.3.11 Ensure ipv6 router advertisements are not accepted | Audit
        shell:
          cmd: |
            ipv6="$(sysctl "net.ipv6.conf.all.accept_ra" | awk -F= '{print $2}')";
            echo $ipv6 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv6_router_advertisements_all_current_status_conf_check

      # Define remediation status
      - set_fact: 
          ipv6_router_advertisements_remediation_status: "{{ true if ipv6_router_advertisements_all_current_status_conf_check.stdout == 'configured' else false }}"
        changed_when: false

      # Check net.ipv6.conf.all.accept_ra is disabled on sysctl.conf file
      - name: 3.3.11 Ensure ipv6 router advertisements are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv6.conf.all.accept_ra\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv6_router_advertisements_all_conf_check

      # Update remediation status
      - set_fact: 
          ipv6_router_advertisements_remediation_status: "{{ true if (ipv6_router_advertisements_remediation_status and ipv6_router_advertisements_all_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv6_router_advertisements_remediation_status

      # Check if one of sysctl configuration files has net.ipv6.conf.all.accept_ra configuration
      - name: 3.3.11 Ensure ipv6 router advertisements are not accepted | Audit
        shell:
          cmd: |
            'item_exists=$(grep -E "^\s{0,}net.ipv6.conf.all.accept_ra\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.all.accept_ra\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_router_advertisements_all_conf_check
        loop: "{{ sysctl_conf_files }}"

     # Update remediation status
      - set_fact:
          ipv6_router_advertisements_remediation_status: "{{ true if (ipv6_router_advertisements_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv6_router_advertisements_all_conf_check.results | list }}"
        when: ipv6_router_advertisements_remediation_status

      # Check if net.ipv6.conf.all.accept_ra is configured in one of the UFW sysctl configuration files
      - name: 3.3.11 Ensure ipv6 router advertisements are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv6.conf.all.accept_ra\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.all.accept_ra\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_router_advertisements_all_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          ipv6_router_advertisements_remediation_status: "{{ true if (ipv6_router_advertisements_remediation_status and ipv6_router_advertisements_all_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv6_router_advertisements_remediation_status
    
    # Audit net.ipv6.conf.default.accept_ra status
    - name: 3.3.11 Ensure ipv6 router advertisements are not accepted | Audit
      block:
      # Check current net.ipv6.conf.default.accept_ra status
      - name: 3.3.11 Ensure ipv6 router advertisements are not accepted | Audit
        shell:
          cmd: |
            ipv6="$(sysctl "net.ipv6.conf.default.accept_ra" | awk -F= '{print $2}')";
            echo $ipv6 | grep -q '0' && echo 'configured' || echo 'not_configured'
        changed_when: false
        register: ipv6_router_advertisements_default_current_status_conf_check

      # Update remediation status
      - set_fact: 
          ipv6_router_advertisements_remediation_status: "{{ true if (ipv6_router_advertisements_remediation_status and ipv6_router_advertisements_default_current_status_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv6_router_advertisements_remediation_status

      # Check net.ipv6.conf.default.accept_ra is disabled on sysctl.conf file
      - name: 3.3.11 Ensure ipv6 router advertisements are not accepted | Audit
        shell:
          cmd: 'grep -Eq "^\s{0,}net.ipv6.conf.default.accept_ra\s{0,}=\s{0,}0" /etc/sysctl.conf && echo configured || echo not_configured'
        changed_when: false
        register: ipv6_router_advertisements_default_sysctl_conf_check

      # Update remediation status
      - set_fact: 
          ipv6_router_advertisements_remediation_status: "{{ true if (ipv6_router_advertisements_remediation_status and ipv6_router_advertisements_default_sysctl_conf_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv6_router_advertisements_remediation_status

      # Check if one of sysctl configuration files has net.ipv6.conf.default.accept_ra configuration
      - name: 3.3.11 Ensure ipv6 router advertisements are not accepted | Audit
        shell:
          cmd: |
           'item_exists=$(grep -E "^\s{0,}net.ipv6.conf.default.accept_ra\s{0,}" {{ item }}';
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.default.accept_ra\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_router_advertisements_default_conf_check
        loop: "{{ sysctl_conf_files }}"

      # Update remediation status
      - set_fact:
          ipv6_router_advertisements_remediation_status: "{{ true if (ipv6_router_advertisements_remediation_status or item.stdout == 'configured') else false }}"
        changed_when: false
        loop_control:
          label: "{{ item.stdout }}"
        loop: "{{ ipv6_router_advertisements_default_conf_check.results | list }}"
        when: ipv6_router_advertisements_remediation_status
      
      # Check if net.ipv6.conf.default.accept_ra is configured in one of the UFW sysctl configuration files
      - name: 3.3.11 Ensure ipv6 router advertisements are not accepted | Audit
        shell:
          cmd: |
            ufw_conf="$([[ -f /etc/default/ufw ]] && awk -F= '/^\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)"; \
            item_exists=$([[ -f $ufw_conf ]] && grep -E "^\s{0,}net.ipv6.conf.default.accept_ra\s{0,}" $(echo $ufw_conf))
            if [ $? == 0 ] && [ ! -z $"item_exists" ]; then
              echo $item_exists | grep -Eq "^\s{0,}net.ipv6.conf.default.accept_ra\s{0,}=\s{0,}0" && echo configured || echo not_configured
            else
              echo configured
            fi;
        changed_when: false
        register: ipv6_router_advertisements_default_ufw_sysctl_conf_files_check
      
      # Update remediation status
      - set_fact: 
          ipv6_router_advertisements_remediation_status: "{{ true if (ipv6_router_advertisements_remediation_status and ipv6_router_advertisements_default_ufw_sysctl_conf_files_check.stdout == 'configured') else false }}"
        changed_when: false
        when: ipv6_router_advertisements_remediation_status

    # Extract audit result
    - set_fact:
        ipv6_router_advertisements_check:
          name: 3.3.11 Ensure ipv6 router advertisements are not accepted
          scored: true
          automated: true
          remediation_status: "{{ true if ipv6_router_advertisements_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ipv6_router_advertisements_check] }}"
      changed_when: false

    # 3.3.11 Ensure ipv6 router advertisements are not accepted | Remediation
    - name: "3.3.11 Ensure ipv6 router advertisements are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.accept_ra
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not ipv6_router_advertisements_check.remediation_status 
    
    # 3.3.11 Ensure ipv6 router advertisements are not accepted | Remediation
    - name: "3.3.11 Ensure ipv6 router advertisements are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv6.conf.default.accept_ra
        value: 0
        state: present
        sysctl_set: true
        reload: true
      when: not audit_only and not ipv6_router_advertisements_check.remediation_status 
    
    # 3.3.11 Ensure ipv6 router advertisements are not accepted | Remediation
    - name: "3.3.11 Ensure ipv6 router advertisements are not accepted | Remediation"
      ansible.posix.sysctl:
        name: net.ipv4.route.flush
        value: 1
        sysctl_set: false
        reload: true
      when: not audit_only and not ipv6_router_advertisements_check.remediation_status 
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"


