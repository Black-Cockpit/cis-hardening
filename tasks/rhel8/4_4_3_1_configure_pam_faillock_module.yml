# 4.4.3.1 Configure pam_faillock module
- name: 4.4.3.1 Configure pam_faillock module
  block:
  # 4.4.3.1.1 Ensure password failed attempts lockout is configured
  #
  # The deny=<n> option will deny access if the number of consecutive authentication
  # failures for this user during the recent interval exceeds.
  - name: "4.4.3.1.1 Ensure password failed attempts lockout is configured"
    block:
    # 4.4.3.1.1 Ensure password failed attempts lockout is configured | Audit
    - name: 4.4.3.1.1 Ensure password failed attempts lockout is configured | Audit
      shell:
        cmd: |
          faillock_deny=$(awk -F '=' '{print $2}' <<< $(grep -Pi -- '^\h*deny\h*=\h*[1-5]\b' /etc/security/faillock.conf || echo "deny = 6"))
          [[ "$faillock_deny" -lt 6 ]] && [[ "$faillock_deny" -gt 0 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: faillock_deny_status_check

    # 4.4.3.1.1 Ensure password failed attempts lockout is configured | Audit
    - name: 4.4.3.1.1 Ensure password failed attempts lockout is configured | Audit
      shell:
        cmd: |
          if [ -f /etc/pam.d/system-auth ]; then
              grep -Pi -- '^\h*auth\h+(requisite|required|sufficient)\h+pam_faillock\.so\h+([^#\n\r]+\h+)?deny\h*=\h*(0|[6-9]|[1-9][0-9]+)\b' /etc/pam.d/system-auth && \
                  echo 'not_configured' || echo 'configured'
          else
              echo 'not_configured'
          fi
      changed_when: false
      register: system_auth_faillock_deny_status_check

     # Extract audit result
    - set_fact:
        faillock_deny_check:
          name: 4.4.3.1.1 Ensure password failed attempts lockout is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (faillock_deny_status_check.stdout == 'configured' and system_auth_faillock_deny_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [faillock_deny_check] }}"
      changed_when: false

    # 4.4.3.1.1 Ensure password failed attempts lockout is configured | Remediation
    - name: 4.4.3.1.1 Ensure password failed attempts lockout is configured | Remediation
      replace:
        path: /etc/security/faillock.conf
        regexp: '^(#deny|deny)[\s]{1,}='
        replace: ''
      when: not audit_only and not faillock_deny_check.remediation_status

    # 4.4.3.1.1 Ensure password failed attempts lockout is configured | Remediation
    - name: 4.4.3.1.1 Ensure password failed attempts lockout is configured | Remediation
      lineinfile:
        path: /etc/security/faillock.conf
        regexp: '^deny[\s]{1,}=[\s]{1,}5'
        line: "deny = 5"
        create: true
      when: not audit_only and not faillock_deny_check.remediation_status
    
    # 4.4.3.1.1 Ensure password failed attempts lockout is configured | Remediation
    - name: 4.4.3.1.1 Ensure password failed attempts lockout is configured | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              for pam_file in system-auth password-auth; do
                  authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$pam_file"
                  sed -ri 's/(^\s*auth\s+(requisite|required|sufficient)\s+pam_faillock\.so.*)(\s+deny\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
              done
              authselect apply-changes
          fi
      when: not audit_only and not faillock_deny_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.1.2 Ensure password unlock time is configured
  #
  # unlock_time=<n> - The access will be re-enabled after seconds after the lock out.
  # value 0 has the same meaning as value never - the access will not be re-enabled
  # The
  # without resetting the faillock entries by the faillock(8) command.
  #
  # Note:
  # - The default directory that pam_faillock uses is usually cleared on system boot so
  #   the access will be also re-enabled after system reboot. If that is undesirable a
  #   different tally directory must be set with the dir option.
  #
  # - It is usually undesirable to permanently lock out users as they can become easily
  #   a target of denial of service attack unless the usernames are random and kept
  #   secret to potential attackers.
  #
  # - The maximum configurable value for unlock_time is 604800
  - name: "4.4.3.1.2 Ensure password unlock time is configured"
    block:
    # 4.4.3.1.2 Ensure password unlock time is configured | Audit
    - name: 4.4.3.1.2 Ensure password unlock time is configured | Audit
      shell:
        cmd: |
          unlock_time=$(awk -F '=' '{print $2}' <<< $(grep -Pi -- '^\h*unlock_time\h*=\h*(0|9[0-9][0-9]|[1-9][0-9]{3,})\b' /etc/security/faillock.conf || echo "unlock_time = 604801"))
          [[ "$unlock_time" -lt 604801 ]] && [[ "$unlock_time" -gt 0 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: unlock_time_status_check

    # 4.4.3.1.2 Ensure password unlock time is configured | Audit
    - name: 4.4.3.1.2 Ensure password unlock time is configured | Audit
      shell:
        cmd: |
          if [ -f /etc/pam.d/system-auth ]; then
              grep -Pi -- '^\h*auth\h+(requisite|required|sufficient)\h+pam_faillock\.so\h+([^#\n\r]+\h+)?unlock_time\h*=\h*([1-9]|[1-9][0-9]|[1-8][0-9][0-9])\b' /etc/pam.d/system-auth && \
                  echo 'not_configured' || echo 'configured'
          else
              echo 'not_configured'
          fi
      changed_when: false
      register: system_auth_unlock_time_status_check

     # Extract audit result
    - set_fact:
        unlock_time_check:
          name: 4.4.3.1.2 Ensure password unlock time is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (unlock_time_status_check.stdout == 'configured' and system_auth_unlock_time_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [unlock_time_check] }}"
      changed_when: false
    
    # 4.4.3.1.2 Ensure password unlock time is configured | Remediation
    - name: 4.4.3.1.1 Ensure password failed attempts lockout is configured | Remediation
      replace:
        path: /etc/security/faillock.conf
        regexp: '^(#unlock_time|unlock_time)[\s]{1,}=[\s]{1,}[\d]{1,}'
        replace: ''
      when: not audit_only and not unlock_time_check.remediation_status

    # 4.4.3.1.2 Ensure password unlock time is configured | Remediation
    - name: 4.4.3.1.2 Ensure password unlock time is configured | Remediation
      lineinfile:
        path: /etc/security/faillock.conf
        regexp: '^unlock_time[\s]{1,}=[\s]{1,}900'
        line: "unlock_time = 900"
        create: true
      when: not audit_only and not unlock_time_check.remediation_status
    
    # 4.4.3.1.2 Ensure password unlock time is configured | Remediation
    - name: 4.4.3.1.2 Ensure password unlock time is configured | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              for pam_file in system-auth password-auth; do
                  authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$pam_file"
                  sed -ri 's/(^\s*auth\s+(requisite|required|sufficient)\s+pam_faillock\.so.*)(\s+unlock_time\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
              done
              authselect apply-changes
          fi
      when: not audit_only and not unlock_time_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.4.3.1.3 Ensure password failed attempts lockout includes root account
  #
  # even_deny_root: Root account can become locked as well as regular accounts
  #
  # root_unlock_time=n: This option implies even_deny_root option. Allow access after n
  # seconds to root account after the account is locked. In case the option is not specified
  # the value is the same as of the unlock_time option.
  - name: "4.4.3.1.3 Ensure password failed attempts lockout includes root account"
    block:
    # 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Audit
    - name: 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Audit
      shell:
        cmd: |
          # Extract root account unlock time
          root_unlock_time=$(awk -F '=' '{print $2}' <<< $(grep -Pi -- '^\h*(root_unlock_time\h*=\h*\d+)\b' /etc/security/faillock.conf || echo "root_unlock_time = 0"))
          
          # Check if even_deny_root is set and root_unlock_time is greater than 60 (1 minute)
          grep -Piq -- '^\h*(even_deny_root)\b' /etc/security/faillock.conf && \
          [[ "$root_unlock_time" -gt 59 ]] && echo 'configured' || echo 'not_configured'
      changed_when: false
      register: root_unlock_status_check

    # 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Audit
    - name: 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Audit
      shell:
        cmd: |
          if [ -f /etc/pam.d/system-auth ]; then
              grep -Pi -- '^\h*auth\h+([^#\n\r]+\h+)pam_faillock\.so\h+([^#\n\r]+\h+)?root_unlock_time\h*=\h*([1-9]|[1-5][0-9])\b' /etc/pam.d/password-auth && \
                  echo 'not_configured' || echo 'configured'
          else
              echo 'not_configured'
          fi
      changed_when: false
      register: system_auth_root_unlock_status_check

     # Extract audit result
    - set_fact:
        root_unlock_check:
          name: 4.4.3.1.3 Ensure password failed attempts lockout includes root account
          scored: true
          automated: true
          remediation_status: "{{ true if (root_unlock_status_check.stdout == 'configured' and system_auth_root_unlock_status_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [root_unlock_check] }}"
      changed_when: false

    # 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Remediation
    - name: 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Remediation
      replace:
        path: /etc/security/faillock.conf
        regexp: '^(#root_unlock_time|root_unlock_time)[\s]{1,}=[\s]{1,}[\d]{1,}'
        replace: ''
      when: not audit_only and not root_unlock_check.remediation_status

    # 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Remediation
    - name: 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Remediation
      lineinfile:
        path: /etc/security/faillock.conf
        regexp: '^root_unlock_time[\s]{1,}=[\s]{1,}60'
        line: "root_unlock_time = 60"
        create: true
      when: not audit_only and not root_unlock_check.remediation_status

    # 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Remediation
    - name: 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Remediation
      replace:
        path: /etc/security/faillock.conf
        regexp: '^(#even_deny_root|even_deny_root)'
        replace: ''
      when: not audit_only and not root_unlock_check.remediation_status

    # 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Remediation
    - name: 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Remediation
      lineinfile:
        path: /etc/security/faillock.conf
        regexp: '^even_deny_root'
        line: "even_deny_root"
        create: true
      when: not audit_only and not root_unlock_check.remediation_status
    
    # 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Remediation
    - name: 4.4.3.1.3 Ensure password failed attempts lockout includes root account | Remediation
      shell:
        cmd: |
          if [ -f /etc/authselect/authselect.conf ]; then
              for pam_file in system-auth password-auth; do
                  authselect_file="/etc/authselect/$(head -1 /etc/authselect/authselect.conf | grep 'custom/')/$pam_file"
                  sed -ri 's/(^\s*auth\s+(.*)\s+pam_faillock\.so.*)(\s+even_deny_root)(.*$)/\1\4/' "$authselect_file"
                  sed -ri 's/(^\s*auth\s+(.*)\s+pam_faillock\.so.*)(\s+root_unlock_time\s*=\s*\S+)(.*$)/\1\4/' "$authselect_file"
              done
              authselect apply-changes
          fi
      when: not audit_only and not root_unlock_check.remediation_status
    tags:
    - "server_level_2"
    - "workstation_level_2"
    when: "'server_level_2' in levels or 'workstation_level_2' in levels"