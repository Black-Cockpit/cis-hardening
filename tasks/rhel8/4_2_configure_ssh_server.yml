# 4.2 Configure SSH Server
- name: 4.2 Configure SSH Server
  block:
  # 4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured
  #
  # The file /etc/ssh/sshd_config , and files ending in .conf in the /etc/ssh/sshd_config.d
  # directory, contain configuration specifications for sshd .
  - name: "4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured"
    block:
    # 4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Audit
    - name: 4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Audit
      stat:
        path: /etc/ssh/sshd_config.d
      changed_when: false
      register: sshd_config_dir_stat

    # 4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Audit
    - name: 4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Audit
      stat:
        path: /etc/ssh/sshd_config
      changed_when: false
      register: sshd_config_stat

    # Audit /etc/at.allow
    - set_fact:
        sshd_config_check: "{{ true if (sshd_config_stat.stat.exists and sshd_config_stat.stat.mode == '0600' and sshd_config_stat.stat.pw_name == 'root' and sshd_config_stat.stat.gr_name == 'root') else false}}"

    # 4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Audit
    - name: 4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Audit
      shell:
        cmd: 'find /etc/ssh/sshd_config.d -name "*.conf" -type f \( -perm /077 -o ! -user root -o ! -group root \) | wc -l'
      changed_when: false
      register: sshd_config_files_stat_check
      when: sshd_config_dir_stat.stat.exists

    # Extract audit result
    - set_fact:
        sshd_permission_check:
          name: 4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured
          scored: true
          automated: true
          remediation_status: "{{ true if (sshd_config_check and (not sshd_config_dir_stat.stat.exists or (sshd_config_files_stat_check.stdout == '0'))) else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [sshd_permission_check] }}"
      changed_when: false

    # 4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Remediation
    - name: "4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Remediation"
      file:
        name: "/etc/ssh/sshd_config"
        mode: "0600"
        owner: root
        group: root
      when: not audit_only and not sshd_permission_check.remediation_status and not sshd_config_check

    # 4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Remediation
    - name: "4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Remediation"
      find:
        paths: "/etc/ssh/sshd_config.d"
        file_type: file
        patterns:
        - "*.conf"
        recurse: true
      register: sshd_config_files_list
      when: not audit_only and sshd_config_dir_stat.stat.exists and not sshd_permission_check.remediation_status

    # 4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Remediation
    - name: "4.2.1 Ensure permissions on /etc/ssh/sshd_config are configured | Remediation"
      file:
        name: "{{ item.path }}"
        mode: "0600"
        owner: root
        group: root
      with_items:
      - "{{ sshd_config_files_list.files }}"
      loop_control:
        label: "{{ item.path }}"
      when: not audit_only and sshd_config_dir_stat.stat.exists and not sshd_permission_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.2 Ensure permissions on SSH private host key files are configured
  #
  # An SSH private key is one of two files used in SSH public key authentication. In this
  # authentication method, the possession of the private key is proof of identity. Only a
  # private key that corresponds to a public key will be able to authenticate successfully.
  # The private keys need to be stored and handled carefully, and no copies of the private
  # key should be distributed.
  - name: "4.2.2 Ensure permissions on SSH private host key files are configured"
    block:
    # Define remediation status
    - set_fact:
        ssh_private_keys_permission_remediation_status: true
      changed_when: false

    # 4.2.2 Ensure permissions on SSH private host key files are configured | Audit
    # Extract group owning ssh private keys
    - name: 4.2.2 Ensure permissions on SSH private host key files are configured | Audit
      shell:
        cmd: ssh_private_key_group="$(grep -Po -- '^(ssh_keys|_?ssh)\b' /etc/group)" && echo $ssh_private_key_group || echo ""
      changed_when: false
      register: ssh_keys_group_check

    # Set ssh private key group name
    - set_fact:
        ssh_keys_group: "{{ ssh_keys_group_check.stdout if (ssh_keys_group_check is defined and ssh_keys_group_check.stdout != '') else 'root' }}"
      changed_when: false

    # 4.2.2 Ensure permissions on SSH private host key files are configured | Audit
    # Extract ssh keys file
    - name: 4.2.2 Ensure permissions on SSH private host key files are configured | Audit
      shell:
        cmd: |
          # Loop through ssh files and check if file is a key
          [ -d /etc/ssh ] && while IFS= read -r -d $'\0' l_file; do
              if grep -Pq ':\h+OpenSSH\h+private\h+key\b' <<<"$(file "$l_file")"; then
                  echo "$l_file"
              fi
          done < <(find -L /etc/ssh -xdev -type f -print0) || echo ""
      changed_when: false
      register: ssh_keys_files_list

    # Set ssh private key files list
    - set_fact:
        ssh_keys_files: "{{ ssh_keys_files_list.stdout_lines | list }}"
      changed_when: false

    # 4.2.2 Ensure permissions on SSH private host key files are configured | Audit
    - name: 4.2.2 Ensure permissions on SSH private host key files are configured | Audit
      shell:
        cmd: "if [ -d /etc/ssh ]; then\n  # Extract file mode\n  mode=$(stat -Lc '%#a' \"{{ item }}\")\n        #magic___^_^___line\n  # Extract file owner\n  owner=$(stat -Lc '%U' \"{{ item }}\")\n        #magic___^_^___line\n  # Extract file group\n  group=$(stat -Lc '%G' \"{{ item }}\")\n        #magic___^_^___line\n  if [ $(($mode & {{ expected_file_mask }})) -gt 0 ] || [ \"$owner\" != \"root\" ] || [[ ! \"$group\" =~ \"{{ ssh_keys_group }}\" ]]; then \n    echo not_configured\n  else\n    echo configured\n  fi\nelse\n  echo configured\nfi\n"
      changed_when: false
      loop: "{{ ssh_keys_files }}"
      register: ssh_keys_files_stat_check
      vars:
        expected_file_mask: "{{ '0177' if ssh_keys_group == 'root' else '0137' }}"

    # Update remediation status
    - set_fact:
        ssh_private_keys_permission_remediation_status: "{{ true if (ssh_private_keys_permission_remediation_status and item.stdout == 'configured') else false }}"
      changed_when: false
      loop_control:
        label: "{{ item.stdout }}"
      loop: "{{ ssh_keys_files_stat_check.results | list }}"

    # Extract audit result
    - set_fact:
        ssh_private_keys_permission_check:
          name: 4.2.2 Ensure permissions on SSH private host key files are configured
          scored: true
          automated: true
          remediation_status: "{{ true if ssh_private_keys_permission_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_private_keys_permission_check] }}"
      changed_when: false

    # 4.2.2 Ensure permissions on SSH private host key files are configured | Remediation
    - name: 4.2.2 Ensure permissions on SSH private host key files are configured | Remediation
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
            # Define max permission based on the group
            max_perm="$(printf '%o' $((0777 & ~{{ expected_file_mask }})))"

            # Update owner and group
            chown root:{{ ssh_keys_group }} {{ item }}
            chmod $max_perm {{ item }}
          fi
      changed_when: false
      loop: "{{ ssh_keys_files }}"
      vars:
        expected_file_mask: "{{ '0177' if ssh_keys_group == 'root' else '0137' }}"
      when: not audit_only and not ssh_private_keys_permission_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.3 Ensure permissions on SSH public host key files are configured
  #
  # An SSH public key is one of two files used in SSH public key authentication. In this
  # authentication method, a public key is a key that can be used for verifying digital
  # signatures generated using a corresponding private key. Only a public key that
  # corresponds to a private key will be able to authenticate successfully.
  - name: "4.2.3 Ensure permissions on SSH public host key files are configured"
    block:
    # Define remediation status
    - set_fact:
        ssh_public_keys_permission_remediation_status: true
      changed_when: false

    # 4.2.3 Ensure permissions on SSH public host key files are configured | Audit
    # Extract group owning ssh private keys
    - name: 4.2.3 Ensure permissions on SSH public host key files are configured | Audit
      shell:
        cmd: ssh_private_key_group="$(grep -Po -- '^(ssh_keys|_?ssh)\b' /etc/group)" && echo $ssh_private_key_group || echo ""
      changed_when: false
      register: ssh_keys_group_check

    # Set ssh private key group name
    - set_fact:
        ssh_keys_group: "{{ ssh_keys_group_check.stdout if (ssh_keys_group_check is defined and ssh_keys_group_check.stdout != '') else 'root' }}"
      changed_when: false

    # 4.2.3 Ensure permissions on SSH public host key files are configured | Audit
    # Extract ssh public keys file
    - name: 4.2.3 Ensure permissions on SSH public host key files are configured | Audit
      shell:
        cmd: |
          # Loop through ssh files and check if file is a key
          [ -d /etc/ssh ] && while IFS= read -r -d $'\0' l_file; do
              if grep -Pq ':\h+OpenSSH\h+(\H+\h+)public\h+key\b' <<<"$(file "$l_file")"; then
                  echo "$l_file"
              fi
          done < <(find -L /etc/ssh -xdev -type f -print0) || echo ""
      changed_when: false
      register: ssh_public_keys_files_list

    # Set ssh public key files list
    - set_fact:
        ssh_public_keys_files: "{{ ssh_public_keys_files_list.stdout_lines | list }}"
      changed_when: false

    # 4.2.3 Ensure permissions on SSH public host key files are configured | Audit
    - name: 4.2.3 Ensure permissions on SSH public host key files are configured | Audit
      shell:
        cmd: "if [ -d /etc/ssh ]; then\n  # Extract file mode\n  mode=$(stat -Lc '%#a' \"{{ item }}\")\n        #magic___^_^___line\n  # Extract file owner\n  owner=$(stat -Lc '%U' \"{{ item }}\")\n        #magic___^_^___line\n  # Extract file group\n  group=$(stat -Lc '%G' \"{{ item }}\")\n        #magic___^_^___line\n  if [ $(($mode & {{ expected_file_mask }})) -gt 0 ] || [ \"$owner\" != \"root\" ] || [[ ! \"$group\" =~ \"{{ ssh_keys_group }}\" ]]; then \n    echo not_configured\n  else\n    echo configured\n  fi\nelse\n  echo configured\nfi\n"
      changed_when: false
      loop: "{{ ssh_public_keys_files }}"
      register: ssh_public_keys_files_stat_check
      vars:
        expected_file_mask: "0133"

    # Update remediation status
    - set_fact:
        ssh_public_keys_permission_remediation_status: "{{ true if (ssh_public_keys_permission_remediation_status and item.stdout == 'configured') else false }}"
      changed_when: false
      loop_control:
        label: "{{ item.stdout }}"
      loop: "{{ ssh_public_keys_files_stat_check.results | list }}"

    # Extract audit result
    - set_fact:
        ssh_public_keys_permission_check:
          name: 4.2.3 Ensure permissions on SSH public host key files are configured
          scored: true
          automated: true
          remediation_status: "{{ true if ssh_public_keys_permission_remediation_status else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_public_keys_permission_check] }}"
      changed_when: false

    # 4.2.3 Ensure permissions on SSH public host key files are configured | Remediation
    - name: 4.2.3 Ensure permissions on SSH public host key files are configured | Remediation
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
            # Define max permission based on the group
            max_perm="$(printf '%o' $((0777 & ~{{ expected_file_mask }})))"

            # Update owner and group
            chown root:{{ ssh_keys_group }} {{ item }}
            chmod $max_perm {{ item }}
          fi
      changed_when: false
      loop: "{{ ssh_public_keys_files }}"
      vars:
        expected_file_mask: "0133"
      when: not audit_only and not ssh_public_keys_permission_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.4 Ensure sshd access is configured
  #
  # There are several options available to limit which users and group can access the
  # system via SSH. It is recommended that at least one of the following options be
  # leveraged:
  #
  #   - AllowUsers:   The AllowUsers variable gives the system administrator the option of
  #                   allowing specific users to ssh into the system. The list consists of space
  #                   separated user names. Numeric user IDs are not recognized with this
  #                   variable. If a system administrator wants to restrict user access further by
  #                   only allowing the allowed users to log in from a particular host, the entry
  #                   can be specified in the form of user@host.
  #
  #   - AllowGroups:  The AllowGroups variable gives the system administrator the option of
  #                   allowing specific groups of users to ssh into the system. The list consists
  #                   of space separated group names. Numeric group IDs are not recognized
  #                   with this variable.
  #
  #   - DenyUsers:    The DenyUsers variable gives the system administrator the option of
  #                   denying specific users to ssh into the system. The list consists of space
  #                   separated user names. Numeric user IDs are not recognized with this
  #                   variable. If a system administrator wants to restrict user access further by
  #                   specifically denying a user's access from a particular host, the entry can
  #                   be specified in the form of user@host.
  #
  #   - DenyGroups:   The DenyGroups variable gives the system administrator the option of
  #                   denying specific groups of users to ssh into the system. The list consists of
  #                   space separated group names. Numeric group IDs are not recognized
  #                   with this variable.
  - name: "4.2.4 Ensure sshd access is configured"
    block:
    # 4.2.4 Ensure sshd access is configured | Audit
    - name: 4.2.4 Ensure sshd access is configured | Audit
      shell:
        cmd: |
          sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts \
          | awk '{print $1}')" | grep -Pi '^\h*(allow|deny)(users|groups)\h+\H+(\h+.*)?$' | wc -l
      changed_when: false
      register: ssh_allow_users_list_check

    # 4.2.4 Ensure sshd access is configured | Audit
    - name: 4.2.4 Ensure sshd access is configured | Audit
      shell:
        cmd: |
          grep -Pis '^\h*(allow|deny)(users|groups)\h+\H+(\h+.*)?$' \
          /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | wc -l
      changed_when: false
      register: ssh_allow_users_conf_check

    # Extract audit result
    - set_fact:
        ssh_access_check:
          name: 4.2.4 Ensure sshd access is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_allow_users_list_check.stdout != '0' and ssh_allow_users_conf_check.stdout != '0' ) else false }}"
      changed_when: false

    # Set remidiation description
    - set_fact:
        remediation_description:
          remediation: "Consider to set allowed or denied users and groups on /etc/ssh/sshd_config"
      changed_when: false

    - set_fact:
        ssh_access_check: "{{ ssh_access_check | combine(remediation_description) }}"
      # Append remediation description to audit result
      changed_when: false
      when: not audit_only and not ssh_access_check.remediation_status

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_access_check] }}"
      changed_when: false
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.5 Ensure sshd Banner is configured
  #
  # The Banner parameter specifies a file whose contents must be sent to the remote user
  # before authentication is permitted. By default, no banner is displayed.
  - name: "4.2.5 Ensure sshd Banner is configured"
    block:
    # 4.2.5 Ensure sshd Banner is configured | Audit
    - name: 4.2.5 Ensure sshd Banner is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Extract ssh banner
              ssh_banner=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | \
              awk '{print $1}')" | grep banner | awk '{print $2}')

              # Chech if sha256 matches
              [[ "$ssh_banner" == "/etc/issue.net" ]] && echo 'matches' || echo 'not_matched'
          else
              echo 'matches'
          fi
      changed_when: false
      register: ssh_banner_configured_check

    # Extract audit result
    - set_fact:
        ssh_banner_check:
          name: 4.2.5 Ensure sshd Banner is configured
          scored: true
          automated: true
          remediation_status: "{{ true if ssh_banner_configured_check.stdout == 'matches' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_banner_check] }}"
      changed_when: false

    # 4.2.5 Ensure sshd Banner is configured | Remediation
    - name: "4.2.5 Ensure sshd Banner is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(Banner|#Banner)"
        state: absent
      when: not audit_only and not ssh_banner_check.remediation_status

    # 4.2.5 Ensure sshd Banner is configured | Remediation
    - name: "4.2.5 Ensure sshd Banner is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(Banner)"
        line: 'Banner /etc/issue.net'
        state: present
      when: not audit_only and not ssh_banner_check.remediation_status

    # 4.2.5 Ensure sshd Banner is configured | Remediation
    - name: "4.2.5 Ensure sshd Banner is configured | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_banner_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.6 Ensure sshd Ciphers are configured
  #
  # This variable limits the ciphers that SSH can use during communication.
  - name: "4.2.6 Ensure sshd Ciphers are configured"
    block:
    # 4.2.6 Ensure sshd Ciphers are configured | Audit
    - name: 4.2.6 Ensure sshd Ciphers are configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Extract ssh ciphers
              sshd_ciphers=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep ciphers)

              # check if ssh has a weak cipher in use
              if grep -q "3des-cbc" <<<"$sshd_ciphers" || grep "aes128-cbc" <<<"$sshd_ciphers" || \
                 grep "aes192-cbc" <<<"$sshd_ciphers" || grep "aes256-cbc" <<<"$sshd_ciphers" || grep "rijndael-cbc@lysator.liu.se" <<<"$sshd_ciphers"; then
                  echo 'not_configured'
              else
                  echo 'configured'
              fi
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_ciphers_conf_check

    # Extract audit result
    - set_fact:
        ssh_ciphers_check:
          name: 4.2.6 Ensure sshd Ciphers are configured
          scored: true
          automated: true
          remediation_status: "{{ true if ssh_ciphers_conf_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_ciphers_check] }}"
      changed_when: false

    # 4.2.6 Ensure sshd Ciphers are configured | Remediation
    - name: "4.2.6 Ensure sshd Ciphers are configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(Ciphers|#Ciphers)"
        state: absent
      when: not audit_only and not ssh_ciphers_check.remediation_status

    # 4.2.6 Ensure sshd Ciphers are configured | Remediation
    - name: "4.2.6 Ensure sshd Ciphers are configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(Ciphers)"
        line: 'Ciphers -3des-cbc,aes128-cbc,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se'
        state: present
      when: not audit_only and not ssh_ciphers_check.remediation_status

    # 4.2.6 Ensure sshd Ciphers are configured | Remediation
    - name: "4.2.6 Ensure sshd Ciphers are configured | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_ciphers_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured
  #
  # Note: To clarify, the two settings described below are only meant for idle connections
  # from a protocol perspective and are not meant to check if the user is active or not. An
  # idle user does not mean an idle connection. SSH does not and never had, intentionally,
  # the capability to drop idle users. In SSH versions before 8.2p1 there was a bug that
  # caused these values to behave in such a manner that they were abused to disconnect
  # idle users. This bug has been resolved in 8.2p1 and thus it can no longer be abused
  # disconnect idle users.
  #
  # The two options ClientAliveInterval and ClientAliveCountMax control the timeout of
  # SSH sessions. Taken directly from man 5 sshd_config :
  #
  #   - ClientAliveInterval:  Sets a timeout interval in seconds after which if no data
  #                           has been received from the client, sshd(8) will send a message through the
  #                           encrypted channel to request a response from the client. The default is 0,
  #                           indicating that these messages will not be sent to the client.
  #
  #   - ClientAliveCountMax:  Sets the number of client alive messages which may be
  #                           sent without sshd(8) receiving any messages back from the client. If this
  #                           threshold is reached while client alive messages are being sent, sshd will
  #                           disconnect the client, terminating the session. It is important to note that the use
  #                           of client alive messages is very different from TCPKeepAlive. The client alive
  #                           messages are sent through the encrypted channel and therefore will not be
  #                           spoofable. The TCP keepalive option en‐abled by TCPKeepAlive is spoofable.
  #                           The client alive mechanism is valuable when the client or server depend on
  #                           knowing when a connection has become unresponsive. The default value is 3. If
  #                           ClientAliveInterval is set to 15, and ClientAliveCountMax is left at the default,
  #                           unresponsive SSH clients will be disconnected after approximately 45 seconds.
  #                           Setting a zero ClientAliveCountMax disables connection termination.
  - name: "4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured"
    block:
    # 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Audit
    - name: 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Extract ssh client alive count max
              client_alive_count_max=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep clientalivecountmax | awk '{print $2}' || echo '0')

              [[ "$client_alive_count_max" -gt 0 ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_client_alive_count_max_check

    # 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Audit
    - name: 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Extract ssh client alive interval
              client_alive_interval=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep clientaliveinterval | awk '{print $2}' || echo '0')

              [[ "$client_alive_interval" -gt 0 ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_client_alive_interval_check

    # 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Audit
    - name: 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*ClientAliveCountMax\h+"?0\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_client_alive_count_max_conf_check

    # Set ssh client alive count max remidiation status
    - set_fact:
        ssh_client_alive_count_max_remidiation_status: "{{ true if (ssh_client_alive_count_max_check.stdout == 'configured' and ssh_client_alive_count_max_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Extract audit result
    - set_fact:
        ssh_client_intervals_config_check:
          name: 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_client_alive_interval_check.stdout == 'configured' and ssh_client_alive_count_max_remidiation_status) else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_client_intervals_config_check] }}"
      changed_when: false

    # 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Remediation
    - name: "4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(ClientAliveInterval|#ClientAliveInterval)"
        state: absent
      when: not audit_only and not ssh_client_intervals_config_check.remediation_status and not (ssh_client_alive_interval_check.stdout == 'configured')

    # 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Remediation
    - name: "4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(ClientAliveInterval)"
        line: 'ClientAliveInterval {{ rhel8.sshd.client_alive_interval | default(cis_defaults.sshd.client_alive_interval) }}'
        state: present
      when: not audit_only and not ssh_client_intervals_config_check.remediation_status and not (ssh_client_alive_interval_check.stdout == 'configured')

    # 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Remediation
    - name: "4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(ClientAliveCountMax|#ClientAliveCountMax)"
        state: absent
      when: not audit_only and not ssh_client_intervals_config_check.remediation_status and not ssh_client_alive_count_max_remidiation_status

    # 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Remediation
    - name: "4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(ClientAliveCountMax)"
        line: 'ClientAliveCountMax {{ rhel8.sshd.client_alive_count_max | default(cis_defaults.sshd.client_alive_count_max) }}'
        state: present
      when: not audit_only and not ssh_client_intervals_config_check.remediation_status and not ssh_client_alive_count_max_remidiation_status

    # 4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Remediation
    - name: "4.2.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_client_intervals_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.8 Ensure sshd DisableForwarding is enabled
  #
  # The DisableForwarding parameter disables all forwarding features, including X11, ssh-
  # agent(1), TCP and StreamLocal. This option overrides all other forwarding-related
  # options and may simplify restricted configurations.
  #
  #   - X11Forwarding provides the ability to tunnel X11 traffic through the connection to
  #     enable remote graphic connections.
  #
  #   - ssh-agent is a program to hold private keys used for public key authentication.
  #     Through use of environment variables the agent can be located and
  #     automatically used for authentication when logging in to other machines using
  #     ssh.
  #   - SSH port forwarding is a mechanism in SSH for tunneling application ports from
  #     the client to the server, or servers to clients. It can be used for adding encryption
  #     to legacy applications, going through firewalls, and some system administrators
  #     and IT professionals use it for opening backdoors into the internal network from
  #     their home machines.
  - name: "4.2.8 Ensure sshd DisableForwarding is enabled"
    block:
    # 4.2.8 Ensure sshd DisableForwarding is enabled | Audit
    - name: 4.2.8 Ensure sshd DisableForwarding is enabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh disable forwarding value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i disableforwarding | awk '{print $2}')

              [[ "$audit_out" == "yes" ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_disable_forwaring_status_check

    # 4.2.8 Ensure sshd DisableForwarding is enabled | Audit
    - name: 4.2.8 Ensure sshd DisableForwarding is enabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*DisableForwarding\h+\"?no\"?\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_disable_forwaring_conf_check

    # Extract audit result
    - set_fact:
        ssh_disable_forwaring_config_check:
          name: 4.2.8 Ensure sshd DisableForwarding is enabled
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_disable_forwaring_status_check.stdout == 'configured' and ssh_disable_forwaring_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_disable_forwaring_config_check] }}"
      changed_when: false

    # 4.2.8 Ensure sshd DisableForwarding is enabled | Remediation
    - name: "4.2.8 Ensure sshd DisableForwarding is enabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(DisableForwarding|#DisableForwarding)"
        state: absent
      when: not audit_only and not ssh_disable_forwaring_config_check.remediation_status

    # 4.2.8 Ensure sshd DisableForwarding is enabled | Remediation
    - name: "4.2.8 Ensure sshd DisableForwarding is enabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(DisableForwarding)"
        line: 'DisableForwarding yes'
        state: present
      when: not audit_only and not ssh_disable_forwaring_config_check.remediation_status

    # 4.2.8 Ensure sshd DisableForwarding is enabled | Remediation
    - name: "4.2.8 Ensure sshd DisableForwarding is enabled | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_disable_forwaring_config_check.remediation_status
    tags:
    - "workstation_level_1"
    - "server_level_2"
    when: "'workstation_level_1' in levels or 'server_level_2' in levels"



  # 4.2.9 Ensure sshd HostbasedAuthentication is disabled
  #
  # The HostbasedAuthentication parameter specifies if authentication is allowed through
  # trusted hosts via the user of .rhosts , or /etc/hosts.equiv , along with successful public
  # key client host authentication.
  - name: "4.2.9 Ensure sshd HostbasedAuthentication is disabled"
    block:
    # 4.2.9 Ensure sshd HostbasedAuthentication is disabled | Audit
    - name: 4.2.9 Ensure sshd HostbasedAuthentication is disabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh host base authentication value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i hostbasedauthentication | awk '{print $2}')

              [[ "$audit_out" == "no" ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_host_based_auth_status_check

    # 4.2.9 Ensure sshd HostbasedAuthentication is disabled | Audit
    - name: 4.2.9 Ensure sshd HostbasedAuthentication is disabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*HostbasedAuthentication\h+"?yes"?\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_host_based_auth_conf_check

    # Extract audit result
    - set_fact:
        ssh_host_based_auth_config_check:
          name: 4.2.9 Ensure sshd HostbasedAuthentication is disabled
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_host_based_auth_status_check.stdout == 'configured' and ssh_host_based_auth_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_host_based_auth_config_check] }}"
      changed_when: false

    # 4.2.9 Ensure sshd HostbasedAuthentication is disabled | Remediation
    - name: "4.2.9 Ensure sshd HostbasedAuthentication is disabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(HostbasedAuthentication|#HostbasedAuthentication)"
        state: absent
      when: not audit_only and not ssh_host_based_auth_config_check.remediation_status

    # 4.2.9 Ensure sshd HostbasedAuthentication is disabled | Remediation
    - name: "4.2.9 Ensure sshd HostbasedAuthentication is disabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(HostbasedAuthentication)"
        line: 'HostbasedAuthentication no'
        state: present
      when: not audit_only and not ssh_host_based_auth_config_check.remediation_status

    # 4.2.9 Ensure sshd HostbasedAuthentication is disabled | Remediation
    - name: "4.2.9 Ensure sshd HostbasedAuthentication is disabled | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_host_based_auth_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.10 Ensure sshd IgnoreRhosts is enabled
  #
  # The IgnoreRhosts parameter specifies that .rhosts and .shosts files will not be used in
  # RhostsRSAAuthentication or HostbasedAuthentication .
  - name: "4.2.10 Ensure sshd IgnoreRhosts is enabled"
    block:
    # 4.2.10 Ensure sshd IgnoreRhosts is enabled | Audit
    - name: 4.2.10 Ensure sshd IgnoreRhosts is enabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh host base authentication value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i ignorerhosts | awk '{print $2}')

              [[ "$audit_out" == "yes" ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_ignore_rhost_status_check

    # 4.2.10 Ensure sshd IgnoreRhosts is enabled | Audit
    - name: 4.2.10 Ensure sshd IgnoreRhosts is enabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*ignorerhosts\h+"?no"?\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_ignore_rhost_conf_check

    # Extract audit result
    - set_fact:
        ssh_ignore_rhost_config_check:
          name: 4.2.10 Ensure sshd IgnoreRhosts is enabled
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_ignore_rhost_status_check.stdout == 'configured' and ssh_ignore_rhost_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_ignore_rhost_config_check] }}"
      changed_when: false

    # 4.2.10 Ensure sshd IgnoreRhosts is enabled | Remediation
    - name: "4.2.10 Ensure sshd IgnoreRhosts is enabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(IgnoreRhosts|#IgnoreRhosts)"
        state: absent
      when: not audit_only and not ssh_ignore_rhost_config_check.remediation_status

    # 4.2.10 Ensure sshd IgnoreRhosts is enabled | Remediation
    - name: "4.2.10 Ensure sshd IgnoreRhosts is enabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(IgnoreRhosts)"
        line: 'IgnoreRhosts yes'
        state: present
      when: not audit_only and not ssh_ignore_rhost_config_check.remediation_status

    # 4.2.10 Ensure sshd IgnoreRhosts is enabled | Remediation
    - name: "4.2.10 Ensure sshd IgnoreRhosts is enabled | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_ignore_rhost_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.11 Ensure sshd KexAlgorithms is configured
  #
  # Key exchange is any method in cryptography by which cryptographic keys are
  # exchanged between two parties, allowing use of a cryptographic algorithm. If the sender
  # and receiver wish to exchange encrypted messages, each must be equipped to encrypt
  # messages to be sent and decrypt messages received
  - name: "4.2.11 Ensure sshd KexAlgorithms is configured"
    block:
    # 4.2.11 Ensure sshd KexAlgorithms is configured | Audit
    - name: 4.2.11 Ensure sshd KexAlgorithms is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Extract ssh ciphers
              sshd_ciphers=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep kexalgorithms)

              # check if ssh has a weak cipher in use
              if grep -q "diffie-hellman-group1-sha1" <<<"$sshd_ciphers" || grep "diffie-hellman-group-exchange-sha1" <<<"$sshd_ciphers" || \
                   grep "diffie-hellman-group14-sha1" <<<"$sshd_ciphers" ; then
                  echo 'not_configured'
              else
                  echo 'configured'
              fi
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_kex_algorithms_conf_check

    # Extract audit result
    - set_fact:
        ssh_kex_algorithms_check:
          name: 4.2.11 Ensure sshd KexAlgorithms is configured
          scored: true
          automated: true
          remediation_status: "{{ true if ssh_kex_algorithms_conf_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_kex_algorithms_check] }}"
      changed_when: false

    # 4.2.11 Ensure sshd KexAlgorithms is configured | Remediation
    - name: "4.2.11 Ensure sshd KexAlgorithms is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(KexAlgorithms|#KexAlgorithms)"
        state: absent
      when: not audit_only and not ssh_kex_algorithms_check.remediation_status

    # 4.2.11 Ensure sshd KexAlgorithms is configured | Remediation
    - name: "4.2.11 Ensure sshd KexAlgorithms is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(KexAlgorithms)"
        line: 'KexAlgorithms -diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1'
        state: present
      when: not audit_only and not ssh_kex_algorithms_check.remediation_status

    # 4.2.11 Ensure sshd KexAlgorithms is configured | Remediation
    - name: "4.2.11 Ensure sshd KexAlgorithms is configured | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_kex_algorithms_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.12 Ensure sshd LoginGraceTime is configured
  #
  # The LoginGraceTime parameter specifies the time allowed for successful authentication
  # to the SSH server. The longer the Grace period is the more open unauthenticated
  # connections can exist. Like other session controls in this session the Grace Period
  # should be limited to appropriate organizational limits to ensure the service is available
  # for needed access.
  - name: "4.2.12 Ensure sshd LoginGraceTime is configured"
    block:
    # 4.2.12 Ensure sshd LoginGraceTime is configured | Audit
    - name: 4.2.12 Ensure sshd LoginGraceTime is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh login grace time value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i logingracetime | awk '{print $2}' || echo 100 )

              [[ "$audit_out" -lt 61 ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_login_grace_time_status_check

    # 4.2.12 Ensure sshd LoginGraceTime is configured | Audit
    - name: 4.2.12 Ensure sshd LoginGraceTime is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*LoginGraceTime\h+"?(0|6[1-9]|[7-9][0-9]|[1-9][0-9][0-9]+|[^1]m)\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_login_grace_time_conf_check

    # Extract audit result
    - set_fact:
        ssh_login_grace_time_config_check:
          name: 4.2.12 Ensure sshd LoginGraceTime is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_login_grace_time_status_check.stdout == 'configured' and ssh_login_grace_time_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_login_grace_time_config_check] }}"
      changed_when: false

    # 4.2.12 Ensure sshd LoginGraceTime is configured | Remediation
    - name: "4.2.12 Ensure sshd LoginGraceTime is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(LoginGraceTime|#LoginGraceTime)"
        state: absent
      when: not audit_only and not ssh_login_grace_time_config_check.remediation_status

    # 4.2.12 Ensure sshd LoginGraceTime is configured | Remediation
    - name: "4.2.12 Ensure sshd LoginGraceTime is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(LoginGraceTime)"
        line: 'LoginGraceTime {{ rhel8.sshd.login_grace_time | default(cis_defaults.sshd.login_grace_time) }}'
        state: present
      when: not audit_only and not ssh_login_grace_time_config_check.remediation_status

    # 4.2.12 Ensure sshd LoginGraceTime is configured | Remediation
    - name: "4.2.12 Ensure sshd LoginGraceTime is configured | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_login_grace_time_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.13 Ensure sshd LogLevel is configured
  #
  # LogLevel gives the verbosity level that is used when logging messages from sshd. The
  # possible values are: QUIET , FATAL , ERROR , INFO , VERBOSE , DEBUG , DEBUG1 , DEBUG2 , and
  # DEBUG3 . The default is INFO. DEBUG and DEBUG1 are equivalent. DEBUG2 and DEBUG3 each
  # specify higher levels of debugging output.
  # LogLevel
  # Note: Logging with a DEBUG level violates the privacy of users and is not
  # recommended.
  - name: "4.2.13 Ensure sshd LogLevel is configured"
    block:
    # 4.2.13 Ensure sshd LogLevel is configured | Audit
    - name: 4.2.13 Ensure sshd LogLevel is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh log level value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i loglevel | awk '{print $2}' || echo 100 )

              [[ "$audit_out" != "INFO" ]] && [[ "$audit_out" != "VERBOSE" ]] && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_log_level_status_check

    # 4.2.13 Ensure sshd LogLevel is configured | Audit
    - name: 4.2.13 Ensure sshd LogLevel is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*loglevel\h+' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_log_level_conf_check

    # Extract audit result
    - set_fact:
        ssh_log_level_config_check:
          name: 4.2.13 Ensure sshd LogLevel is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_log_level_status_check.stdout == 'configured' and ssh_log_level_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_log_level_config_check] }}"
      changed_when: false

    # 4.2.13 Ensure sshd LogLevel is configured | Remediation
    - name: "4.2.13 Ensure sshd LogLevel is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(LogLevel|#LogLevel)"
        state: absent
      when: not audit_only and not ssh_log_level_config_check.remediation_status

    # 4.2.13 Ensure sshd LogLevel is configured | Remediation
    - name: "4.2.13 Ensure sshd LogLevel is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(LogLevel)"
        line: 'LogLevel {{ rhel8.sshd.log_level | default(cis_defaults.sshd.log_level) }}'
        state: present
      when: not audit_only and not ssh_log_level_config_check.remediation_status

    # 4.2.13 Ensure sshd LogLevel is configured | Remediation
    - name: "4.2.13 Ensure sshd LogLevel is configured | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_log_level_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.14 Ensure sshd MACs are configured
  #
  # This variable limits the types of MAC algorithms that SSH can use during
  # communication.
  - name: "4.2.14 Ensure sshd MACs are configured"
    block:
    # 4.2.14 Ensure sshd MACs are configured | Audit
    - name: 4.2.14 Ensure sshd MACs are configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Extract sshd MACs
              sshd_macs=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i "MACs")

              # check if ssh has a weak cipher in use
              if grep -q "hmac-md5" <<<"$sshd_macs" || grep "hmac-md5-96" <<<"$sshd_macs" || grep "hmac-ripemd160" <<<"$sshd_macs" || \
                 grep -q "hmac-sha1-96" <<<"$sshd_macs" || grep "umac-64@openssh.com" <<<"$sshd_macs" || \
                 grep "hmac-md5-etm@openssh.com" <<<"$sshd_macs" || grep "hmac-md5-96-etm@openssh.com" <<<"$sshd_macs" || \
                 grep "hmac-ripemd160-etm@openssh.com" <<<"$sshd_macs" || grep "hmac-sha1-96-etm@openssh.com" <<<"$sshd_macs" || \
                 grep "umac-64-etm@openssh.com" <<<"$sshd_macs" ; then
                  echo 'not_configured'
              else
                  echo 'configured'
              fi
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_macs_conf_check

    # Extract audit result
    - set_fact:
        ssh_macs_check:
          name: 4.2.14 Ensure sshd MACs are configured
          scored: true
          automated: true
          remediation_status: "{{ true if ssh_macs_conf_check.stdout == 'configured' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_macs_check] }}"
      changed_when: false

    # 4.2.14 Ensure sshd MACs are configured | Remediation
    - name: "4.2.14 Ensure sshd MACs are configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(MACs|#MACs)"
        state: absent
      when: not audit_only and not ssh_macs_check.remediation_status

    # 4.2.14 Ensure sshd MACs are configured | Remediation
    - name: "4.2.14 Ensure sshd MACs are configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(MACs)"
        line: 'MACs -hmac-md5,hmac-md5-96,hmac-ripemd160,hmac-sha1-96,umac-64@openssh.com,hmac-md5-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,umac-64-etm@openssh.com'
        state: present
      when: not audit_only and not ssh_macs_check.remediation_status

    # 4.2.14 Ensure sshd MACs are configured | Remediation
    - name: "4.2.14 Ensure sshd MACs are configured | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_macs_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.15 Ensure sshd MaxAuthTries is configured
  #
  # The MaxAuthTries parameter specifies the maximum number of authentication attempts
  # permitted per connection. When the login failure count reaches half the number, error
  # messages will be written to the syslog file detailing the login failure.
  - name: "4.2.15 Ensure sshd MaxAuthTries is configured"
    block:
    # 4.2.15 Ensure sshd MaxAuthTries is configured | Audit
    - name: 4.2.15 Ensure sshd MaxAuthTries is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh auth max retry value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i maxauthtries | awk '{print $2}' || echo 100 )

              [[ "$audit_out" -lt 5 ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_auth_max_retry_status_check

    # 4.2.15 Ensure sshd MaxAuthTries is configured | Audit
    - name: 4.2.15 Ensure sshd MaxAuthTries is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*maxauthtries\h+"?([5-9]|[1-9][0-9]+)\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_auth_max_retry_conf_check

    # Extract audit result
    - set_fact:
        ssh_auth_max_retry_config_check:
          name: 4.2.15 Ensure sshd MaxAuthTries is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_auth_max_retry_status_check.stdout == 'configured' and ssh_auth_max_retry_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_auth_max_retry_config_check] }}"
      changed_when: false

    # 4.2.15 Ensure sshd MaxAuthTries is configured | Remediation
    - name: "4.2.15 Ensure sshd MaxAuthTries is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(MaxAuthTries|#MaxAuthTries)"
        state: absent
      when: not audit_only and not ssh_auth_max_retry_config_check.remediation_status

    # 4.2.15 Ensure sshd MaxAuthTries is configured | Remediation
    - name: "4.2.15 Ensure sshd MaxAuthTries is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(MaxAuthTries)"
        line: 'MaxAuthTries {{ rhel8.sshd.auth_max_retry | default(cis_defaults.sshd.auth_max_retry) }}'
        state: present
      when: not audit_only and not ssh_auth_max_retry_config_check.remediation_status

    # 4.2.15 Ensure sshd MaxAuthTries is configured | Remediation
    - name: "4.2.15 Ensure sshd MaxAuthTries is configured | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_auth_max_retry_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.16 Ensure sshd MaxSessions is configured
  #
  # The MaxSessions parameter specifies the maximum number of open sessions permitted
  # from a given connection.
  - name: "4.2.16 Ensure sshd MaxSessions is configured"
    block:
    # 4.2.16 Ensure sshd MaxSessions is configured | Audit
    - name: 4.2.16 Ensure sshd MaxSessions is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh max session value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i maxsessions | awk '{print $2}' || echo 100 )

              [[ "$audit_out" -lt 11 ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_max_session_status_check

    # 4.2.16 Ensure sshd MaxSessions is configured | Audit
    - name: 4.2.16 Ensure sshd MaxSessions is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*MaxSessions\h+"?(1[1-9]|[2-9][0-9]|[1-9][0-9][0-9]+)\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_max_session_conf_check

    # Extract audit result
    - set_fact:
        ssh_max_session_config_check:
          name: 4.2.16 Ensure sshd MaxSessions is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_max_session_status_check.stdout == 'configured' and ssh_max_session_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_max_session_config_check] }}"
      changed_when: false

    # 4.2.16 Ensure sshd MaxSessions is configured | Remediation
    - name: "4.2.16 Ensure sshd MaxSessions is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(MaxSessions|#MaxSessions)"
        state: absent
      when: not audit_only and not ssh_max_session_config_check.remediation_status

    # 4.2.16 Ensure sshd MaxSessions is configured | Remediation
    - name: "4.2.16 Ensure sshd MaxSessions is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(MaxSessions)"
        line: 'MaxSessions {{ rhel8.sshd.max_session | default(cis_defaults.sshd.max_session) }}'
        state: present
      when: not audit_only and not ssh_max_session_config_check.remediation_status

    # 4.2.16 Ensure sshd MaxSessions is configured | Remediation
    - name: "4.2.16 Ensure sshd MaxSessions is configured | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_max_session_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.17 Ensure sshd MaxStartups is configured
  #
  # The MaxStartups parameter specifies the maximum number of concurrent
  # unauthenticated connections to the SSH daemon.
  - name: "4.2.17 Ensure sshd MaxStartups is configured"
    block:
    # 4.2.17 Ensure sshd MaxStartups is configured | Audit
    - name: 4.2.17 Ensure sshd MaxStartups is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh max startups value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i maxstartups | awk '{print $2}'  || echo "11:31:101")

              # Extract start
              start=$(awk -F':' '{print $1}' <<< "$audit_out")

              # Extract rate
              rate=$(awk -F':' '{print $2}' <<< "$audit_out")

              # Extract full
              full=$(awk -F':' '{print $3}' <<< "$audit_out")

              # Audit
              [[ "$start" -lt 11 ]] && [[ "$rate" -lt 31 ]] && [[ "$full" -lt 61 ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_max_startups_status_check

    # 4.2.17 Ensure sshd MaxStartups is configured | Audit
    - name: 4.2.17 Ensure sshd MaxStartups is configured | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*maxstartups\h+"?(((1[1-9]|[1-9][0-9][0-9]+):([0-9]+):([0-9]+))|(([0-9]+):(3[1-9]|[4-9][0-9]|[1-9][0-9][0-9]+):([0-9]+))|(([0-9]+):([0-9]+):(6[1-9]|[7-9][0-9]|[1-9][0-9][0-9]+)))\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_max_startups_conf_check

    # Extract audit result
    - set_fact:
        ssh_max_startups_config_check:
          name: 4.2.17 Ensure sshd MaxStartups is configured
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_max_startups_status_check.stdout == 'configured' and ssh_max_startups_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_max_startups_config_check] }}"
      changed_when: false

    # Create max startups value
    - set_fact:
        max_startups_value: "{{ rhel8.sshd.max_startups.start | default(cis_defaults.sshd.max_startups.start) }}:{{ rhel8.sshd.max_startups.rate | default(cis_defaults.sshd.max_startups.rate) }}:{{ rhel8.sshd.max_startups.full | default(cis_defaults.sshd.max_startups.full) }}"
      changed_when: false
      when: not audit_only and not ssh_max_startups_config_check.remediation_status

    # 4.2.17 Ensure sshd MaxStartups is configured | Remediation
    - name: "4.2.17 Ensure sshd MaxStartups is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(MaxStartups|#MaxStartups)"
        state: absent
      when: not audit_only and not ssh_max_startups_config_check.remediation_status

    # 4.2.17 Ensure sshd MaxStartups is configured | Remediation
    - name: "4.2.17 Ensure sshd MaxStartups is configured | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(MaxStartups)"
        line: 'MaxStartups {{ max_startups_value }}'
        state: present
      when: not audit_only and not ssh_max_startups_config_check.remediation_status

    # 4.2.17 Ensure sshd MaxStartups is configured | Remediation
    - name: "4.2.17 Ensure sshd MaxStartups is configured | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_max_startups_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.18 Ensure sshd PermitEmptyPasswords is disabled
  #
  # The PermitEmptyPasswords parameter specifies if the SSH server allows login to
  # accounts with empty password strings.
  - name: "4.2.18 Ensure sshd PermitEmptyPasswords is disabled"
    block:
    # 4.2.18 Ensure sshd PermitEmptyPasswords is disabled | Audit
    - name: 4.2.18 Ensure sshd PermitEmptyPasswords is disabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh permit empty password value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i permitemptypasswords | awk '{print $2}')

              [[ "$audit_out" == "no" ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_permit_empty_password_status_check

    # 4.2.18 Ensure sshd PermitEmptyPasswords is disabled | Audit
    - name: 4.2.18 Ensure sshd PermitEmptyPasswords is disabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*PermitEmptyPasswords\h+"?yes\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_permit_empty_password_conf_check

    # Extract audit result
    - set_fact:
        ssh_permit_empty_password_config_check:
          name: 4.2.18 Ensure sshd PermitEmptyPasswords is disabled
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_permit_empty_password_status_check.stdout == 'configured' and ssh_permit_empty_password_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_permit_empty_password_config_check] }}"
      changed_when: false

    # 4.2.18 Ensure sshd PermitEmptyPasswords is disabled | Remediation
    - name: "4.2.18 Ensure sshd PermitEmptyPasswords is disabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(PermitEmptyPasswords|#PermitEmptyPasswords)"
        state: absent
      when: not audit_only and not ssh_permit_empty_password_config_check.remediation_status

    # 4.2.18 Ensure sshd PermitEmptyPasswords is disabled | Remediation
    - name: "4.2.18 Ensure sshd PermitEmptyPasswords is disabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(PermitEmptyPasswords)"
        line: 'PermitEmptyPasswords no'
        state: present
      when: not audit_only and not ssh_permit_empty_password_config_check.remediation_status

    # 4.2.18 Ensure sshd PermitEmptyPasswords is disabled | Remediation
    - name: "4.2.18 Ensure sshd PermitEmptyPasswords is disabled | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_permit_empty_password_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.19 Ensure sshd PermitRootLogin is disabled
  #
  # The PermitRootLogin parameter specifies if the root user can log in using SSH. The
  # default is prohibit-password .
  - name: "4.2.19 Ensure sshd PermitRootLogin is disabled"
    block:
    # 4.2.19 Ensure sshd PermitRootLogin is disabled | Audit
    - name: 4.2.19 Ensure sshd PermitRootLogin is disabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh permit root login value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i permitrootlogin | awk '{print $2}')

              [[ "$audit_out" == "no" ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_permit_root_login_status_check

    # 4.2.19 Ensure sshd PermitRootLogin is disabled | Audit
    - name: 4.2.19 Ensure sshd PermitRootLogin is disabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*PermitRootLogin\h+"?(yes|prohibit-password|forced-commands-only)"?\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_permit_root_login_conf_check

    # Extract audit result
    - set_fact:
        ssh_permit_root_login_config_check:
          name: 4.2.19 Ensure sshd PermitRootLogin is disabled
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_permit_root_login_status_check.stdout == 'configured' and ssh_permit_root_login_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_permit_root_login_config_check] }}"
      changed_when: false

    # 4.2.19 Ensure sshd PermitRootLogin is disabled | Remediation
    - name: "4.2.19 Ensure sshd PermitRootLogin is disabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(PermitRootLogin|#PermitRootLogin)"
        state: absent
      when: not audit_only and not ssh_permit_root_login_config_check.remediation_status

    # 4.2.19 Ensure sshd PermitRootLogin is disabled | Remediation
    - name: "4.2.19 Ensure sshd PermitRootLogin is disabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(PermitRootLogin)"
        line: 'PermitRootLogin no'
        state: present
      when: not audit_only and not ssh_permit_root_login_config_check.remediation_status

    # 4.2.19 Ensure sshd PermitRootLogin is disabled | Remediation
    - name: "4.2.19 Ensure sshd PermitRootLogin is disabled | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_permit_root_login_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.20 Ensure sshd PermitUserEnvironment is disabled
  #
  # The PermitUserEnvironment option allows users to present environment options to the
  # SSH daemon.
  - name: "4.2.20 Ensure sshd PermitUserEnvironment is disabled"
    block:
    # 4.2.20 Ensure sshd PermitUserEnvironment is disabled | Audit
    - name: 4.2.20 Ensure sshd PermitUserEnvironment is disabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh permit user environment value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i permituserenvironment | awk '{print $2}')

              [[ "$audit_out" == "no" ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_permit_user_env_status_check

    # 4.2.20 Ensure sshd PermitUserEnvironment is disabled | Audit
    - name: 4.2.20 Ensure sshd PermitUserEnvironment is disabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*PermitUserEnvironment\h+"?yes"?\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_permit_user_env_conf_check

    # Extract audit result
    - set_fact:
        ssh_permit_user_env_config_check:
          name: 4.2.20 Ensure sshd PermitUserEnvironment is disabled
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_permit_user_env_status_check.stdout == 'configured' and ssh_permit_user_env_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_permit_user_env_config_check] }}"
      changed_when: false

    # 4.2.20 Ensure sshd PermitUserEnvironment is disabled | Remediation
    - name: "4.2.20 Ensure sshd PermitUserEnvironment is disabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(PermitUserEnvironment|#PermitUserEnvironment)"
        state: absent
      when: not audit_only and not ssh_permit_user_env_config_check.remediation_status

    # 4.2.20 Ensure sshd PermitUserEnvironment is disabled | Remediation
    - name: "4.2.20 Ensure sshd PermitUserEnvironment is disabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(PermitUserEnvironment)"
        line: 'PermitUserEnvironment no'
        state: present
      when: not audit_only and not ssh_permit_user_env_config_check.remediation_status

    # 4.2.20 Ensure sshd PermitUserEnvironment is disabled | Remediation
    - name: "4.2.20 Ensure sshd PermitUserEnvironment is disabled | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_permit_user_env_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.21 Ensure sshd UsePAM is enabled
  #
  # The PermitUserEnvironment option allows users to present environment options to the
  # SSH daemon.
  - name: "4.2.21 Ensure sshd UsePAM is enabled"
    block:
    # 4.2.21 Ensure sshd UsePAM is enabled | Audit
    - name: 4.2.21 Ensure sshd UsePAM is enabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              # Get ssh use pam value
              audit_out=$(sshd -T -C user=root -C host="$(hostname)" -C addr="$(grep $(hostname) /etc/hosts | awk '{print $1}')" | grep -i usepam | awk '{print $2}')

              [[ "$audit_out" == "yes" ]] && echo 'configured' || echo 'not_configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_use_pam_status_check

    # 4.2.21 Ensure sshd UsePAM is enabled | Audit
    - name: 4.2.21 Ensure sshd UsePAM is enabled | Audit
      shell:
        cmd: |
          if [ -d /etc/ssh ]; then
              grep -Pis '^\h*UsePAM\h+"?no"?\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf && echo 'not_configured' || echo 'configured'
          else
              echo 'configured'
          fi
      changed_when: false
      register: ssh_use_pam_conf_check

    # Extract audit result
    - set_fact:
        ssh_use_pam_config_check:
          name: 4.2.21 Ensure sshd UsePAM is enabled
          scored: true
          automated: true
          remediation_status: "{{ true if (ssh_use_pam_status_check.stdout == 'configured' and ssh_use_pam_conf_check.stdout == 'configured') else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_use_pam_config_check] }}"
      changed_when: false

    # 4.2.21 Ensure sshd UsePAM is enabled | Remediation
    - name: "4.2.21 Ensure sshd UsePAM is enabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(UsePAM|#UsePAM)"
        state: absent
      when: not audit_only and not ssh_use_pam_config_check.remediation_status

    # 4.2.21 Ensure sshd UsePAM is enabled | Remediation
    - name: "4.2.21 Ensure sshd UsePAM is enabled | Remediation"
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^(UsePAM)"
        line: 'UsePAM yes'
        state: present
      when: not audit_only and not ssh_use_pam_config_check.remediation_status

    # 4.2.21 Ensure sshd UsePAM is enabled | Remediation
    - name: "4.2.21 Ensure sshd UsePAM is enabled | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_use_pam_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"



  # 4.2.22 Ensure sshd crypto_policy is not set
  #
  # System-wide Crypto policy can be over-ridden or opted out of for openSSH
  - name: "4.2.22 Ensure sshd crypto_policy is not set"
    block:
    # 4.2.22 Ensure sshd crypto_policy is not set | Audit
    - name: 4.2.22 Ensure sshd crypto_policy is not set | Audit
      shell:
        cmd: |
          if [ -d /etc/sysconfig/sshd ]; then
              # Check openssh crypto policy is enabled
              grep -Pi '^\h*CRYPTO_POLICY\h*=' /etc/sysconfig/sshd && echo 'enabled' || echo 'disabled'
          else
              echo 'disabled'
          fi
      changed_when: false
      register: ssh_crypto_policy_status_check

    # Extract audit result
    - set_fact:
        ssh_crypto_policy_config_check:
          name: 4.2.22 Ensure sshd crypto_policy is not set
          scored: true
          automated: true
          remediation_status: "{{ true if ssh_crypto_policy_status_check.stdout == 'disabled' else false }}"
      changed_when: false

    # Appending audit result
    - set_fact:
        audit_result: "{{ (audit_result | default([])) + [ssh_crypto_policy_config_check] }}"
      changed_when: false

    # 4.2.22 Ensure sshd crypto_policy is not set | Remediation
    - name: "4.2.22 Ensure sshd crypto_policy is not set | Remediation"
      shell:
        cmd: |
          if [ -d /etc/sysconfig/sshd ]; then
              # Disable openssh crypto policy
              sed -ri "s/^\s*(CRYPTO_POLICY\s*=.*)$/# \1/" /etc/sysconfig/sshd
          fi
      when: not audit_only and not ssh_use_pam_config_check.remediation_status

    # 4.2.22 Ensure sshd crypto_policy is not set | Remediation
    - name: "4.2.22 Ensure sshd crypto_policy is not set | Remediation"
      systemd:
        name: sshd
        state: reloaded
      when: not audit_only and not ssh_use_pam_config_check.remediation_status
    tags:
    - "server_level_1"
    - "workstation_level_1"
    when: "'server_level_1' in levels or 'workstation_level_1' in levels"